
IrRemoteControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001184  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c2  00800060  00001184  00001218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800122  00800122  000012da  2**0
                  ALLOC
  3 .stab         00002478  00000000  00000000  000012dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007d2  00000000  00000000  00003754  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00003f28  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ef0  00000000  00000000  00004008  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000354  00000000  00000000  00004ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000074f  00000000  00000000  0000524c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000368  00000000  00000000  0000599c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000452  00000000  00000000  00005d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c01  00000000  00000000  00006156  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 49 02 	jmp	0x492	; 0x492 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 84 02 	jmp	0x508	; 0x508 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e8       	ldi	r30, 0x84	; 132
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 32       	cpi	r26, 0x22	; 34
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e2       	ldi	r26, 0x22	; 34
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 33       	cpi	r26, 0x38	; 56
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a1 05 	call	0xb42	; 0xb42 <main>
      8a:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <USART_INIT>:

////////////////////////////////////////////////////////////////////////

void USART_INIT(unsigned char BAUD)
{
	USART_CONTROL_STATUS_REGISTER_B |=(1<<USART_TRANSMITTER_ENABLE)|(1<<USART_RECIEVER_ENABLE)|(1<<USART_RX_COMPLETE_INTERRUPT)|(1<<USART_RX_COMPLETE_INTERRUPT);
      92:	9a b1       	in	r25, 0x0a	; 10
      94:	98 69       	ori	r25, 0x98	; 152
      96:	9a b9       	out	0x0a, r25	; 10
	// Enable TX,RX,TX complete interrupt, Rx complete interrupt
	USART_BAUD_RATE_REGISTER_L =BAUD; 
      98:	89 b9       	out	0x09, r24	; 9
	USART_BAUD_RATE_REGISTER_H =(BAUD>>8);
      9a:	10 bc       	out	0x20, r1	; 32
	
	USART_CONTROL_STATUS_REGISTER_C |=(1<<USART_REGISTER_SELECT)|(1<<USART_CHARACTER_SIZE_BIT0)|(1<<USART_CHARACTER_SIZE_BIT1);
      9c:	80 b5       	in	r24, 0x20	; 32
      9e:	86 68       	ori	r24, 0x86	; 134
      a0:	80 bd       	out	0x20, r24	; 32
	// Set 8 bit character size, no parity, 1 stop bit
	
}
      a2:	08 95       	ret

000000a4 <USART_WRITE_BYTE>:

//////////////////////////////////////////////////////////////////////
void USART_WRITE_BYTE(unsigned char BYTE)
{
	while(!(USART_CONTROL_STATUS_REGISTER_A&(1<<UDRE)));
      a4:	5d 9b       	sbis	0x0b, 5	; 11
      a6:	fe cf       	rjmp	.-4      	; 0xa4 <USART_WRITE_BYTE>
	UDR=BYTE;
      a8:	8c b9       	out	0x0c, r24	; 12
}
      aa:	08 95       	ret

000000ac <USART_WRITE_STRING>:
///////////////////////////////////////////////////////////////////////
void USART_WRITE_STRING(unsigned char *pointer)
{
      ac:	cf 93       	push	r28
      ae:	df 93       	push	r29
      b0:	ec 01       	movw	r28, r24
	while(*pointer)
      b2:	88 81       	ld	r24, Y
      b4:	88 23       	and	r24, r24
      b6:	31 f0       	breq	.+12     	; 0xc4 <USART_WRITE_STRING+0x18>
{
	while(!(USART_CONTROL_STATUS_REGISTER_A&(1<<UDRE)));
	UDR=BYTE;
}
///////////////////////////////////////////////////////////////////////
void USART_WRITE_STRING(unsigned char *pointer)
      b8:	21 96       	adiw	r28, 0x01	; 1
{
	while(*pointer)
	{
		USART_WRITE_BYTE(*pointer);
      ba:	0e 94 52 00 	call	0xa4	; 0xa4 <USART_WRITE_BYTE>
	UDR=BYTE;
}
///////////////////////////////////////////////////////////////////////
void USART_WRITE_STRING(unsigned char *pointer)
{
	while(*pointer)
      be:	89 91       	ld	r24, Y+
      c0:	88 23       	and	r24, r24
      c2:	d9 f7       	brne	.-10     	; 0xba <USART_WRITE_STRING+0xe>
	{
		USART_WRITE_BYTE(*pointer);
		pointer++;
	}
}
      c4:	df 91       	pop	r29
      c6:	cf 91       	pop	r28
      c8:	08 95       	ret

000000ca <USART_DATA_AVAILABLE>:

unsigned char USART_DATA_AVAILABLE()
{
	unsigned char check=0;
   if(USART_CONTROL_STATUS_REGISTER_A & (1<<RXC))
      ca:	8b b1       	in	r24, 0x0b	; 11
   check=1;
   else
   check=0;

   return check;
}
      cc:	88 1f       	adc	r24, r24
      ce:	88 27       	eor	r24, r24
      d0:	88 1f       	adc	r24, r24
      d2:	08 95       	ret

000000d4 <USART_READ_BYTE>:

unsigned char USART_READ_BYTE()
{
	if (USART_DATA_AVAILABLE())
      d4:	0e 94 65 00 	call	0xca	; 0xca <USART_DATA_AVAILABLE>
      d8:	88 23       	and	r24, r24
      da:	11 f0       	breq	.+4      	; 0xe0 <USART_READ_BYTE+0xc>
	{
		return UDR;
      dc:	8c b1       	in	r24, 0x0c	; 12
      de:	08 95       	ret
	}

   
}
      e0:	08 95       	ret

000000e2 <USART_READ_STRING>:

void USART_READ_STRING(unsigned char string_long,unsigned char *string_address)
{
      e2:	cf 92       	push	r12
      e4:	df 92       	push	r13
      e6:	ef 92       	push	r14
      e8:	ff 92       	push	r15
      ea:	0f 93       	push	r16
      ec:	1f 93       	push	r17
      ee:	cf 93       	push	r28
      f0:	df 93       	push	r29
      f2:	7b 01       	movw	r14, r22
	unsigned char i=1;
	for (i=1;i<string_long;i++)
      f4:	82 30       	cpi	r24, 0x02	; 2
      f6:	a8 f0       	brcs	.+42     	; 0x122 <USART_READ_STRING+0x40>
	}

   
}

void USART_READ_STRING(unsigned char string_long,unsigned char *string_address)
      f8:	82 50       	subi	r24, 0x02	; 2
      fa:	c8 2e       	mov	r12, r24
      fc:	dd 24       	eor	r13, r13
      fe:	eb 01       	movw	r28, r22
     100:	cc 0d       	add	r28, r12
     102:	dd 1d       	adc	r29, r13
     104:	21 96       	adiw	r28, 0x01	; 1
     106:	8b 01       	movw	r16, r22
{
	unsigned char i=1;
	for (i=1;i<string_long;i++)
	{
		*string_address=USART_READ_BYTE();
     108:	0e 94 6a 00 	call	0xd4	; 0xd4 <USART_READ_BYTE>
     10c:	f8 01       	movw	r30, r16
     10e:	81 93       	st	Z+, r24
     110:	8f 01       	movw	r16, r30
}

void USART_READ_STRING(unsigned char string_long,unsigned char *string_address)
{
	unsigned char i=1;
	for (i=1;i<string_long;i++)
     112:	ec 17       	cp	r30, r28
     114:	fd 07       	cpc	r31, r29
     116:	c1 f7       	brne	.-16     	; 0x108 <USART_READ_STRING+0x26>
	}

   
}

void USART_READ_STRING(unsigned char string_long,unsigned char *string_address)
     118:	08 94       	sec
     11a:	c1 1c       	adc	r12, r1
     11c:	d1 1c       	adc	r13, r1
{
	unsigned char i=1;
	for (i=1;i<string_long;i++)
     11e:	ec 0c       	add	r14, r12
     120:	fd 1c       	adc	r15, r13
	{
		*string_address=USART_READ_BYTE();
		string_address++;
		
	}
	*string_address=0;
     122:	f7 01       	movw	r30, r14
     124:	10 82       	st	Z, r1
	
}
     126:	df 91       	pop	r29
     128:	cf 91       	pop	r28
     12a:	1f 91       	pop	r17
     12c:	0f 91       	pop	r16
     12e:	ff 90       	pop	r15
     130:	ef 90       	pop	r14
     132:	df 90       	pop	r13
     134:	cf 90       	pop	r12
     136:	08 95       	ret

00000138 <USART_WRITE_Float>:

void USART_WRITE_Float( float float_value)
{
     138:	1f 93       	push	r17
     13a:	cf 93       	push	r28
     13c:	df 93       	push	r29
	long int vlaue = 0;
	unsigned int x,y;
	vlaue=(float_value)*100;
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	30 e0       	ldi	r19, 0x00	; 0
     142:	48 ec       	ldi	r20, 0xC8	; 200
     144:	52 e4       	ldi	r21, 0x42	; 66
     146:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__mulsf3>
     14a:	0e 94 13 07 	call	0xe26	; 0xe26 <__fixsfsi>
	y=vlaue % 100;   // kasr
     14e:	24 e6       	ldi	r18, 0x64	; 100
     150:	30 e0       	ldi	r19, 0x00	; 0
     152:	40 e0       	ldi	r20, 0x00	; 0
     154:	50 e0       	ldi	r21, 0x00	; 0
     156:	0e 94 35 08 	call	0x106a	; 0x106a <__divmodsi4>
     15a:	13 2f       	mov	r17, r19
     15c:	d6 2f       	mov	r29, r22
     15e:	c7 2f       	mov	r28, r23
	x=vlaue / 100;   // sa7e7
	
	USART_WRITE_BYTE((char)x);
     160:	82 2f       	mov	r24, r18
     162:	0e 94 52 00 	call	0xa4	; 0xa4 <USART_WRITE_BYTE>
	USART_WRITE_BYTE((char)(x>>8));
     166:	81 2f       	mov	r24, r17
     168:	0e 94 52 00 	call	0xa4	; 0xa4 <USART_WRITE_BYTE>
	USART_WRITE_BYTE((char)y);
     16c:	8d 2f       	mov	r24, r29
     16e:	0e 94 52 00 	call	0xa4	; 0xa4 <USART_WRITE_BYTE>
	USART_WRITE_BYTE((char)(y>>8));
     172:	8c 2f       	mov	r24, r28
     174:	0e 94 52 00 	call	0xa4	; 0xa4 <USART_WRITE_BYTE>
	
}
     178:	df 91       	pop	r29
     17a:	cf 91       	pop	r28
     17c:	1f 91       	pop	r17
     17e:	08 95       	ret

00000180 <USART_READ_FLoat>:

float USART_READ_FLoat()
{
     180:	cf 92       	push	r12
     182:	df 92       	push	r13
     184:	ef 92       	push	r14
     186:	ff 92       	push	r15
     188:	0f 93       	push	r16
     18a:	1f 93       	push	r17
     18c:	cf 93       	push	r28
     18e:	df 93       	push	r29
     190:	00 d0       	rcall	.+0      	; 0x192 <USART_READ_FLoat+0x12>
     192:	00 d0       	rcall	.+0      	; 0x194 <USART_READ_FLoat+0x14>
     194:	cd b7       	in	r28, 0x3d	; 61
     196:	de b7       	in	r29, 0x3e	; 62
	char buffer1[5]={0};
	char buffer2[5]={0};	
	char i=0;
	int x[2]={0};
     198:	19 82       	std	Y+1, r1	; 0x01
     19a:	1a 82       	std	Y+2, r1	; 0x02
     19c:	1b 82       	std	Y+3, r1	; 0x03
     19e:	1c 82       	std	Y+4, r1	; 0x04
     1a0:	8e 01       	movw	r16, r28
     1a2:	0f 5f       	subi	r16, 0xFF	; 255
     1a4:	1f 4f       	sbci	r17, 0xFF	; 255
	USART_WRITE_BYTE((char)y);
	USART_WRITE_BYTE((char)(y>>8));
	
}

float USART_READ_FLoat()
     1a6:	0f 2e       	mov	r0, r31
     1a8:	f5 e0       	ldi	r31, 0x05	; 5
     1aa:	ef 2e       	mov	r14, r31
     1ac:	ff 24       	eor	r15, r15
     1ae:	f0 2d       	mov	r31, r0
     1b0:	ec 0e       	add	r14, r28
     1b2:	fd 1e       	adc	r15, r29
	char i=0;
	int x[2]={0};
	float vlaue;
	for (i=0;i<2;i++)
	{
		while(!(USART_DATA_AVAILABLE()))
     1b4:	0e 94 65 00 	call	0xca	; 0xca <USART_DATA_AVAILABLE>
     1b8:	88 23       	and	r24, r24
     1ba:	e1 f3       	breq	.-8      	; 0x1b4 <USART_READ_FLoat+0x34>
		{
			
		}
		x[i]=USART_READ_BYTE();
     1bc:	0e 94 6a 00 	call	0xd4	; 0xd4 <USART_READ_BYTE>
     1c0:	f8 01       	movw	r30, r16
     1c2:	80 83       	st	Z, r24
     1c4:	11 82       	std	Z+1, r1	; 0x01
     1c6:	0e 5f       	subi	r16, 0xFE	; 254
     1c8:	1f 4f       	sbci	r17, 0xFF	; 255
	char buffer1[5]={0};
	char buffer2[5]={0};	
	char i=0;
	int x[2]={0};
	float vlaue;
	for (i=0;i<2;i++)
     1ca:	0e 15       	cp	r16, r14
     1cc:	1f 05       	cpc	r17, r15
     1ce:	91 f7       	brne	.-28     	; 0x1b4 <USART_READ_FLoat+0x34>
		x[i]=USART_READ_BYTE();
		
	}
	
	
	vlaue=((float)(x[0]))+(((float)x[1])/100);
     1d0:	69 81       	ldd	r22, Y+1	; 0x01
     1d2:	7a 81       	ldd	r23, Y+2	; 0x02
     1d4:	88 27       	eor	r24, r24
     1d6:	77 fd       	sbrc	r23, 7
     1d8:	80 95       	com	r24
     1da:	98 2f       	mov	r25, r24
     1dc:	0e 94 46 07 	call	0xe8c	; 0xe8c <__floatsisf>
     1e0:	6b 01       	movw	r12, r22
     1e2:	7c 01       	movw	r14, r24
     1e4:	6b 81       	ldd	r22, Y+3	; 0x03
     1e6:	7c 81       	ldd	r23, Y+4	; 0x04
     1e8:	88 27       	eor	r24, r24
     1ea:	77 fd       	sbrc	r23, 7
     1ec:	80 95       	com	r24
     1ee:	98 2f       	mov	r25, r24
     1f0:	0e 94 46 07 	call	0xe8c	; 0xe8c <__floatsisf>
     1f4:	20 e0       	ldi	r18, 0x00	; 0
     1f6:	30 e0       	ldi	r19, 0x00	; 0
     1f8:	48 ec       	ldi	r20, 0xC8	; 200
     1fa:	52 e4       	ldi	r21, 0x42	; 66
     1fc:	0e 94 ab 06 	call	0xd56	; 0xd56 <__divsf3>
     200:	9b 01       	movw	r18, r22
     202:	ac 01       	movw	r20, r24
     204:	c7 01       	movw	r24, r14
     206:	b6 01       	movw	r22, r12
     208:	0e 94 47 06 	call	0xc8e	; 0xc8e <__addsf3>
	
	return vlaue;
}
     20c:	46 2f       	mov	r20, r22
     20e:	57 2f       	mov	r21, r23
     210:	68 2f       	mov	r22, r24
     212:	79 2f       	mov	r23, r25
     214:	cb 01       	movw	r24, r22
     216:	ba 01       	movw	r22, r20
     218:	0f 90       	pop	r0
     21a:	0f 90       	pop	r0
     21c:	0f 90       	pop	r0
     21e:	0f 90       	pop	r0
     220:	df 91       	pop	r29
     222:	cf 91       	pop	r28
     224:	1f 91       	pop	r17
     226:	0f 91       	pop	r16
     228:	ff 90       	pop	r15
     22a:	ef 90       	pop	r14
     22c:	df 90       	pop	r13
     22e:	cf 90       	pop	r12
     230:	08 95       	ret

00000232 <LCD_READ>:


/*****************************************************************************/
	void LCD_READ()
		{
		LCD_PORT|=(1<<LCD_EN);       // set enable high to read
     232:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     234:	8f e8       	ldi	r24, 0x8F	; 143
     236:	91 e0       	ldi	r25, 0x01	; 1
     238:	01 97       	sbiw	r24, 0x01	; 1
     23a:	f1 f7       	brne	.-4      	; 0x238 <LCD_READ+0x6>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <LCD_READ+0xc>
     23e:	00 00       	nop
		_delay_us(100);
		LCD_PORT&=~(1<<LCD_EN);		// reset enable
     240:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     242:	8f e1       	ldi	r24, 0x1F	; 31
     244:	9e e4       	ldi	r25, 0x4E	; 78
     246:	01 97       	sbiw	r24, 0x01	; 1
     248:	f1 f7       	brne	.-4      	; 0x246 <LCD_READ+0x14>
     24a:	00 c0       	rjmp	.+0      	; 0x24c <LCD_READ+0x1a>
     24c:	00 00       	nop
		_delay_ms(5);     			// delay 5 ms 
		}
     24e:	08 95       	ret

00000250 <LCD_Write_4bit_mode>:

/****************************************************************************/
	void LCD_Write_4bit_mode(unsigned char value)
	{
     250:	cf 93       	push	r28
	if (value&0x80)  LCD_PORT|=(1<<LCD_D7); else LCD_PORT&=~(1<<LCD_D7);
     252:	88 23       	and	r24, r24
     254:	14 f4       	brge	.+4      	; 0x25a <LCD_Write_4bit_mode+0xa>
     256:	c0 9a       	sbi	0x18, 0	; 24
     258:	01 c0       	rjmp	.+2      	; 0x25c <LCD_Write_4bit_mode+0xc>
     25a:	c0 98       	cbi	0x18, 0	; 24
	if (value&0x40)  LCD_PORT|=(1<<LCD_D6); else LCD_PORT&=~(1<<LCD_D6);
     25c:	c8 2f       	mov	r28, r24
     25e:	86 ff       	sbrs	r24, 6
     260:	02 c0       	rjmp	.+4      	; 0x266 <LCD_Write_4bit_mode+0x16>
     262:	c1 9a       	sbi	0x18, 1	; 24
     264:	01 c0       	rjmp	.+2      	; 0x268 <LCD_Write_4bit_mode+0x18>
     266:	c1 98       	cbi	0x18, 1	; 24
	if (value&0x20)  LCD_PORT|=(1<<LCD_D5); else LCD_PORT&=~(1<<LCD_D5);
     268:	c5 ff       	sbrs	r28, 5
     26a:	02 c0       	rjmp	.+4      	; 0x270 <LCD_Write_4bit_mode+0x20>
     26c:	c2 9a       	sbi	0x18, 2	; 24
     26e:	01 c0       	rjmp	.+2      	; 0x272 <LCD_Write_4bit_mode+0x22>
     270:	c2 98       	cbi	0x18, 2	; 24
	if (value&0x10)  LCD_PORT|=(1<<LCD_D4); else LCD_PORT&=~(1<<LCD_D4);
     272:	c4 ff       	sbrs	r28, 4
     274:	02 c0       	rjmp	.+4      	; 0x27a <LCD_Write_4bit_mode+0x2a>
     276:	c3 9a       	sbi	0x18, 3	; 24
     278:	01 c0       	rjmp	.+2      	; 0x27c <LCD_Write_4bit_mode+0x2c>
     27a:	c3 98       	cbi	0x18, 3	; 24
	LCD_READ();
     27c:	0e 94 19 01 	call	0x232	; 0x232 <LCD_READ>
	if (value&0x08)  LCD_PORT|=(1<<LCD_D7); else LCD_PORT&=~(1<<LCD_D7);
     280:	c3 ff       	sbrs	r28, 3
     282:	02 c0       	rjmp	.+4      	; 0x288 <LCD_Write_4bit_mode+0x38>
     284:	c0 9a       	sbi	0x18, 0	; 24
     286:	01 c0       	rjmp	.+2      	; 0x28a <LCD_Write_4bit_mode+0x3a>
     288:	c0 98       	cbi	0x18, 0	; 24
	if (value&0x04)  LCD_PORT|=(1<<LCD_D6); else LCD_PORT&=~(1<<LCD_D6);
     28a:	c2 ff       	sbrs	r28, 2
     28c:	02 c0       	rjmp	.+4      	; 0x292 <LCD_Write_4bit_mode+0x42>
     28e:	c1 9a       	sbi	0x18, 1	; 24
     290:	01 c0       	rjmp	.+2      	; 0x294 <LCD_Write_4bit_mode+0x44>
     292:	c1 98       	cbi	0x18, 1	; 24
	if (value&0x02)  LCD_PORT|=(1<<LCD_D5); else LCD_PORT&=~(1<<LCD_D5);
     294:	c1 ff       	sbrs	r28, 1
     296:	02 c0       	rjmp	.+4      	; 0x29c <LCD_Write_4bit_mode+0x4c>
     298:	c2 9a       	sbi	0x18, 2	; 24
     29a:	01 c0       	rjmp	.+2      	; 0x29e <LCD_Write_4bit_mode+0x4e>
     29c:	c2 98       	cbi	0x18, 2	; 24
	if (value&0x01)  LCD_PORT|=(1<<LCD_D4); else LCD_PORT&=~(1<<LCD_D4);
     29e:	c0 ff       	sbrs	r28, 0
     2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <LCD_Write_4bit_mode+0x56>
     2a2:	c3 9a       	sbi	0x18, 3	; 24
     2a4:	01 c0       	rjmp	.+2      	; 0x2a8 <LCD_Write_4bit_mode+0x58>
     2a6:	c3 98       	cbi	0x18, 3	; 24
	LCD_READ();
     2a8:	0e 94 19 01 	call	0x232	; 0x232 <LCD_READ>
	}
     2ac:	cf 91       	pop	r28
     2ae:	08 95       	ret

000002b0 <LCD_CMD>:
//////////////////////////////////////////////////////////
	void LCD_CMD(unsigned char command)
	{
	LCD_PORT &=~(1<<LCD_RS)&~(1<<LCD_RW); // write command ( not generic)
     2b0:	98 b3       	in	r25, 0x18	; 24
     2b2:	9f 79       	andi	r25, 0x9F	; 159
     2b4:	98 bb       	out	0x18, r25	; 24
	LCD_Write_4bit_mode(command);
     2b6:	0e 94 28 01 	call	0x250	; 0x250 <LCD_Write_4bit_mode>
	}
     2ba:	08 95       	ret

000002bc <_lcd_goto_xy>:
	
	}

/////////////////////////////////////////////////////////////
void _lcd_goto_xy(unsigned char row,unsigned char position)
{
     2bc:	cf 93       	push	r28
     2be:	c6 2f       	mov	r28, r22
	if (row==1)
     2c0:	81 30       	cpi	r24, 0x01	; 1
     2c2:	69 f4       	brne	.+26     	; 0x2de <_lcd_goto_xy+0x22>
	{
		LCD_CMD(127+position);
     2c4:	86 2f       	mov	r24, r22
     2c6:	81 58       	subi	r24, 0x81	; 129
     2c8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_CMD>
		cursor_position=(127+position);
     2cc:	6c 2f       	mov	r22, r28
     2ce:	70 e0       	ldi	r23, 0x00	; 0
     2d0:	61 58       	subi	r22, 0x81	; 129
     2d2:	7f 4f       	sbci	r23, 0xFF	; 255
     2d4:	70 93 1f 01 	sts	0x011F, r23
     2d8:	60 93 1e 01 	sts	0x011E, r22
     2dc:	0e c0       	rjmp	.+28     	; 0x2fa <_lcd_goto_xy+0x3e>
	}
	
	else if(row==2)
     2de:	82 30       	cpi	r24, 0x02	; 2
     2e0:	61 f4       	brne	.+24     	; 0x2fa <_lcd_goto_xy+0x3e>
	{
		LCD_CMD(191+position);
     2e2:	86 2f       	mov	r24, r22
     2e4:	81 54       	subi	r24, 0x41	; 65
     2e6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_CMD>
		cursor_position=(191+position);
     2ea:	6c 2f       	mov	r22, r28
     2ec:	70 e0       	ldi	r23, 0x00	; 0
     2ee:	61 54       	subi	r22, 0x41	; 65
     2f0:	7f 4f       	sbci	r23, 0xFF	; 255
     2f2:	70 93 1f 01 	sts	0x011F, r23
     2f6:	60 93 1e 01 	sts	0x011E, r22
	}
	
}
     2fa:	cf 91       	pop	r28
     2fc:	08 95       	ret

000002fe <check_position>:
	LCD_Write_4bit_mode(command);
	}
/////////////////////////////////////////////////////////////
	void check_position()
	{
	if(cursor_position==143)
     2fe:	80 91 1e 01 	lds	r24, 0x011E
     302:	90 91 1f 01 	lds	r25, 0x011F
     306:	8f 38       	cpi	r24, 0x8F	; 143
     308:	91 05       	cpc	r25, r1
     30a:	69 f4       	brne	.+26     	; 0x326 <check_position+0x28>
	{
		_lcd_goto_xy(2,1);
     30c:	82 e0       	ldi	r24, 0x02	; 2
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	61 e0       	ldi	r22, 0x01	; 1
     312:	70 e0       	ldi	r23, 0x00	; 0
     314:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_lcd_goto_xy>
		cursor_position=192;
     318:	80 ec       	ldi	r24, 0xC0	; 192
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	90 93 1f 01 	sts	0x011F, r25
     320:	80 93 1e 01 	sts	0x011E, r24
     324:	08 95       	ret
	}
	else if(cursor_position==207)
     326:	8f 3c       	cpi	r24, 0xCF	; 207
     328:	91 05       	cpc	r25, r1
     32a:	61 f4       	brne	.+24     	; 0x344 <check_position+0x46>
	{
		_lcd_goto_xy(1,1);
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	61 e0       	ldi	r22, 0x01	; 1
     332:	70 e0       	ldi	r23, 0x00	; 0
     334:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_lcd_goto_xy>
		cursor_position=128;
     338:	80 e8       	ldi	r24, 0x80	; 128
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	90 93 1f 01 	sts	0x011F, r25
     340:	80 93 1e 01 	sts	0x011E, r24
     344:	08 95       	ret

00000346 <LCD_Write_Character>:
	
}
///////////////////////////////////////////////////////
void LCD_Write_Character( unsigned char  character)
{
	LCD_PORT &=~(1<<LCD_RW); 
     346:	c5 98       	cbi	0x18, 5	; 24
	LCD_PORT |=(1<<LCD_RS); // write data ( not generic)
     348:	c6 9a       	sbi	0x18, 6	; 24
	LCD_Write_4bit_mode(character);
     34a:	0e 94 28 01 	call	0x250	; 0x250 <LCD_Write_4bit_mode>
	cursor_position++;
     34e:	80 91 1e 01 	lds	r24, 0x011E
     352:	90 91 1f 01 	lds	r25, 0x011F
     356:	01 96       	adiw	r24, 0x01	; 1
     358:	90 93 1f 01 	sts	0x011F, r25
     35c:	80 93 1e 01 	sts	0x011E, r24
	//check_position();
	
}
     360:	08 95       	ret

00000362 <LCD_Write_String>:
//////////////////////////////////////////////
void LCD_Write_String( unsigned char  *pointer)
	{
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	ec 01       	movw	r28, r24
		while(*pointer)
     368:	88 81       	ld	r24, Y
     36a:	88 23       	and	r24, r24
     36c:	31 f0       	breq	.+12     	; 0x37a <LCD_Write_String+0x18>
	cursor_position++;
	//check_position();
	
}
//////////////////////////////////////////////
void LCD_Write_String( unsigned char  *pointer)
     36e:	21 96       	adiw	r28, 0x01	; 1
	{
		while(*pointer)
		{
			LCD_Write_Character(*pointer);
     370:	0e 94 a3 01 	call	0x346	; 0x346 <LCD_Write_Character>
	
}
//////////////////////////////////////////////
void LCD_Write_String( unsigned char  *pointer)
	{
		while(*pointer)
     374:	89 91       	ld	r24, Y+
     376:	88 23       	and	r24, r24
     378:	d9 f7       	brne	.-10     	; 0x370 <LCD_Write_String+0xe>
		{
			LCD_Write_Character(*pointer);
			pointer++;
		}		
	}
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	08 95       	ret

00000380 <LCD_Write_float>:
	
////////////////////////////////////////////////

void LCD_Write_float( float  float_value)
{
     380:	8f 92       	push	r8
     382:	9f 92       	push	r9
     384:	af 92       	push	r10
     386:	bf 92       	push	r11
     388:	cf 92       	push	r12
     38a:	df 92       	push	r13
     38c:	ef 92       	push	r14
     38e:	ff 92       	push	r15
     390:	0f 93       	push	r16
     392:	1f 93       	push	r17
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	cd b7       	in	r28, 0x3d	; 61
     39a:	de b7       	in	r29, 0x3e	; 62
     39c:	2a 97       	sbiw	r28, 0x0a	; 10
     39e:	0f b6       	in	r0, 0x3f	; 63
     3a0:	f8 94       	cli
     3a2:	de bf       	out	0x3e, r29	; 62
     3a4:	0f be       	out	0x3f, r0	; 63
     3a6:	cd bf       	out	0x3d, r28	; 61
	long int vlaue = 0;
	unsigned int x,y;
	char buffer_1[5]={0};
     3a8:	25 e0       	ldi	r18, 0x05	; 5
     3aa:	7e 01       	movw	r14, r28
     3ac:	08 94       	sec
     3ae:	e1 1c       	adc	r14, r1
     3b0:	f1 1c       	adc	r15, r1
     3b2:	f7 01       	movw	r30, r14
     3b4:	32 2f       	mov	r19, r18
     3b6:	11 92       	st	Z+, r1
     3b8:	3a 95       	dec	r19
     3ba:	e9 f7       	brne	.-6      	; 0x3b6 <LCD_Write_float+0x36>
	char buffer_2[5]={0};
     3bc:	0f 2e       	mov	r0, r31
     3be:	f6 e0       	ldi	r31, 0x06	; 6
     3c0:	cf 2e       	mov	r12, r31
     3c2:	dd 24       	eor	r13, r13
     3c4:	f0 2d       	mov	r31, r0
     3c6:	cc 0e       	add	r12, r28
     3c8:	dd 1e       	adc	r13, r29
     3ca:	f6 01       	movw	r30, r12
     3cc:	11 92       	st	Z+, r1
     3ce:	2a 95       	dec	r18
     3d0:	e9 f7       	brne	.-6      	; 0x3cc <LCD_Write_float+0x4c>
	vlaue=(float_value)*100;
     3d2:	20 e0       	ldi	r18, 0x00	; 0
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	48 ec       	ldi	r20, 0xC8	; 200
     3d8:	52 e4       	ldi	r21, 0x42	; 66
     3da:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__mulsf3>
     3de:	0e 94 13 07 	call	0xe26	; 0xe26 <__fixsfsi>
	y=vlaue % 100;   // kasr
     3e2:	24 e6       	ldi	r18, 0x64	; 100
     3e4:	30 e0       	ldi	r19, 0x00	; 0
     3e6:	40 e0       	ldi	r20, 0x00	; 0
     3e8:	50 e0       	ldi	r21, 0x00	; 0
     3ea:	0e 94 35 08 	call	0x106a	; 0x106a <__divmodsi4>
     3ee:	4b 01       	movw	r8, r22
     3f0:	5c 01       	movw	r10, r24
     3f2:	8b 01       	movw	r16, r22
	x=vlaue / 100;   // sa7e7
	
	itoa(x,buffer_1,10);
     3f4:	c9 01       	movw	r24, r18
     3f6:	b7 01       	movw	r22, r14
     3f8:	4a e0       	ldi	r20, 0x0A	; 10
     3fa:	50 e0       	ldi	r21, 0x00	; 0
     3fc:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <itoa>
	itoa(y,buffer_2,10);
     400:	c4 01       	movw	r24, r8
     402:	b6 01       	movw	r22, r12
     404:	4a e0       	ldi	r20, 0x0A	; 10
     406:	50 e0       	ldi	r21, 0x00	; 0
     408:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <itoa>
	LCD_Write_String(buffer_1);
     40c:	c7 01       	movw	r24, r14
     40e:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_Write_String>
	LCD_Write_Character('.');
     412:	8e e2       	ldi	r24, 0x2E	; 46
     414:	0e 94 a3 01 	call	0x346	; 0x346 <LCD_Write_Character>
	if (y<10)
     418:	0a 30       	cpi	r16, 0x0A	; 10
     41a:	11 05       	cpc	r17, r1
     41c:	18 f4       	brcc	.+6      	; 0x424 <LCD_Write_float+0xa4>
	{
		LCD_Write_Character('0');
     41e:	80 e3       	ldi	r24, 0x30	; 48
     420:	0e 94 a3 01 	call	0x346	; 0x346 <LCD_Write_Character>
	}
	LCD_Write_String(buffer_2);
     424:	ce 01       	movw	r24, r28
     426:	06 96       	adiw	r24, 0x06	; 6
     428:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_Write_String>
	
}
     42c:	2a 96       	adiw	r28, 0x0a	; 10
     42e:	0f b6       	in	r0, 0x3f	; 63
     430:	f8 94       	cli
     432:	de bf       	out	0x3e, r29	; 62
     434:	0f be       	out	0x3f, r0	; 63
     436:	cd bf       	out	0x3d, r28	; 61
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	1f 91       	pop	r17
     43e:	0f 91       	pop	r16
     440:	ff 90       	pop	r15
     442:	ef 90       	pop	r14
     444:	df 90       	pop	r13
     446:	cf 90       	pop	r12
     448:	bf 90       	pop	r11
     44a:	af 90       	pop	r10
     44c:	9f 90       	pop	r9
     44e:	8f 90       	pop	r8
     450:	08 95       	ret

00000452 <lcd_ini>:
     452:	8f e5       	ldi	r24, 0x5F	; 95
     454:	9a ee       	ldi	r25, 0xEA	; 234
     456:	01 97       	sbiw	r24, 0x01	; 1
     458:	f1 f7       	brne	.-4      	; 0x456 <lcd_ini+0x4>
     45a:	00 c0       	rjmp	.+0      	; 0x45c <lcd_ini+0xa>
     45c:	00 00       	nop

////////////////////////////////////////////////////////	
void lcd_ini(void)
{
	_delay_ms(15);	
	LCD_PORT &=~(1<<LCD_RS);					//Write intructions
     45e:	c6 98       	cbi	0x18, 6	; 24
												// 15 ms power on delay
	LCD_PORT|=(1<<LCD_D4)|(1<<LCD_D5);			//intial    0x30
     460:	88 b3       	in	r24, 0x18	; 24
     462:	8c 60       	ori	r24, 0x0C	; 12
     464:	88 bb       	out	0x18, r24	; 24
	LCD_READ();									// reading
     466:	0e 94 19 01 	call	0x232	; 0x232 <LCD_READ>
	LCD_READ();									// reading
     46a:	0e 94 19 01 	call	0x232	; 0x232 <LCD_READ>
	LCD_READ();									// reading
     46e:	0e 94 19 01 	call	0x232	; 0x232 <LCD_READ>
	
	LCD_PORT &=~(1<<LCD_D4);
     472:	c3 98       	cbi	0x18, 3	; 24
	
	LCD_READ();									// reading
     474:	0e 94 19 01 	call	0x232	; 0x232 <LCD_READ>
		
	LCD_Write_4bit_mode(0x28);					// Function Set: 4-bit, 2 Line, 5x7 Dots
     478:	88 e2       	ldi	r24, 0x28	; 40
     47a:	0e 94 28 01 	call	0x250	; 0x250 <LCD_Write_4bit_mode>
	
	LCD_Write_4bit_mode(0x0c);					 //display on ,cursor off	
     47e:	8c e0       	ldi	r24, 0x0C	; 12
     480:	0e 94 28 01 	call	0x250	; 0x250 <LCD_Write_4bit_mode>
	
	LCD_Write_4bit_mode(0x06);					//entry mode (advanced cursor)
     484:	86 e0       	ldi	r24, 0x06	; 6
     486:	0e 94 28 01 	call	0x250	; 0x250 <LCD_Write_4bit_mode>
	
	LCD_Write_4bit_mode(0x01);					//clear display , cursor home	
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	0e 94 28 01 	call	0x250	; 0x250 <LCD_Write_4bit_mode>
}
     490:	08 95       	ret

00000492 <__vector_1>:




ISR(INT0_vect)
{
     492:	1f 92       	push	r1
     494:	0f 92       	push	r0
     496:	0f b6       	in	r0, 0x3f	; 63
     498:	0f 92       	push	r0
     49a:	11 24       	eor	r1, r1
//	GICR&=~(1<<INT0);				/*External interrupt INT0 disable	*/
	//fire the serine
	//USART_WRITE_STRING("Alarm");
	//ALARMSYSSTATUS=ALARM;
	
}
     49c:	0f 90       	pop	r0
     49e:	0f be       	out	0x3f, r0	; 63
     4a0:	0f 90       	pop	r0
     4a2:	1f 90       	pop	r1
     4a4:	18 95       	reti

000004a6 <__vector_6>:



ISR(TIMER1_CAPT_vect)
{
     4a6:	1f 92       	push	r1
     4a8:	0f 92       	push	r0
     4aa:	0f b6       	in	r0, 0x3f	; 63
     4ac:	0f 92       	push	r0
     4ae:	11 24       	eor	r1, r1
     4b0:	2f 93       	push	r18
     4b2:	3f 93       	push	r19
     4b4:	8f 93       	push	r24
     4b6:	9f 93       	push	r25
	CurrentCaptureTime=ICR1;
     4b8:	86 b5       	in	r24, 0x26	; 38
     4ba:	97 b5       	in	r25, 0x27	; 39
     4bc:	90 93 34 01 	sts	0x0134, r25
     4c0:	80 93 33 01 	sts	0x0133, r24
	NewBitTime=(CurrentCaptureTime-PreviousCaptureTime);
     4c4:	80 91 33 01 	lds	r24, 0x0133
     4c8:	90 91 34 01 	lds	r25, 0x0134
     4cc:	20 91 35 01 	lds	r18, 0x0135
     4d0:	30 91 36 01 	lds	r19, 0x0136
     4d4:	82 1b       	sub	r24, r18
     4d6:	93 0b       	sbc	r25, r19
     4d8:	90 93 27 01 	sts	0x0127, r25
     4dc:	80 93 26 01 	sts	0x0126, r24
	PreviousCaptureTime=CurrentCaptureTime;
     4e0:	80 91 33 01 	lds	r24, 0x0133
     4e4:	90 91 34 01 	lds	r25, 0x0134
     4e8:	90 93 36 01 	sts	0x0136, r25
     4ec:	80 93 35 01 	sts	0x0135, r24
	NewBitTimeFlag=1;
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	80 93 25 01 	sts	0x0125, r24
	
}
     4f6:	9f 91       	pop	r25
     4f8:	8f 91       	pop	r24
     4fa:	3f 91       	pop	r19
     4fc:	2f 91       	pop	r18
     4fe:	0f 90       	pop	r0
     500:	0f be       	out	0x3f, r0	; 63
     502:	0f 90       	pop	r0
     504:	1f 90       	pop	r1
     506:	18 95       	reti

00000508 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
     508:	1f 92       	push	r1
     50a:	0f 92       	push	r0
     50c:	0f b6       	in	r0, 0x3f	; 63
     50e:	0f 92       	push	r0
     510:	11 24       	eor	r1, r1
     512:	8f 93       	push	r24
	if (IDLETIMECOUNTERFLAG==1)
     514:	80 91 32 01 	lds	r24, 0x0132
     518:	81 30       	cpi	r24, 0x01	; 1
     51a:	91 f4       	brne	.+36     	; 0x540 <__vector_9+0x38>
	{
		IDLETIMECOUNTER++;
     51c:	80 91 37 01 	lds	r24, 0x0137
     520:	8f 5f       	subi	r24, 0xFF	; 255
     522:	80 93 37 01 	sts	0x0137, r24
		if (IDLETIMECOUNTER==IDLETIME)
     526:	80 91 37 01 	lds	r24, 0x0137
     52a:	8e 31       	cpi	r24, 0x1E	; 30
     52c:	49 f4       	brne	.+18     	; 0x540 <__vector_9+0x38>
		{
			SysStatus=LOCKED;
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	80 93 1d 01 	sts	0x011D, r24
			IDLETIMECOUNTER=0;
     534:	10 92 37 01 	sts	0x0137, r1
			IDLETIMECOUNTERFLAG=0;
     538:	10 92 32 01 	sts	0x0132, r1
			LcdUpdateFlag=LOCKED;
     53c:	80 93 1b 01 	sts	0x011B, r24
			//USART_WRITE_STRING("IDLE >> LOCKED");
		}
	}
	
}
     540:	8f 91       	pop	r24
     542:	0f 90       	pop	r0
     544:	0f be       	out	0x3f, r0	; 63
     546:	0f 90       	pop	r0
     548:	1f 90       	pop	r1
     54a:	18 95       	reti

0000054c <setUp>:



void setUp(void)
{
	USART_INIT(16);					/* 57600 baud rate					*/
     54c:	80 e1       	ldi	r24, 0x10	; 16
     54e:	0e 94 49 00 	call	0x92	; 0x92 <USART_INIT>
	DDRB=0xff;
     552:	8f ef       	ldi	r24, 0xFF	; 255
     554:	87 bb       	out	0x17, r24	; 23
	lcd_ini();						/* Initial LCD						*/
     556:	0e 94 29 02 	call	0x452	; 0x452 <lcd_ini>
	TCCR1B|=(1<<CS12);				/* 265 prescale						*/
     55a:	8e b5       	in	r24, 0x2e	; 46
     55c:	84 60       	ori	r24, 0x04	; 4
     55e:	8e bd       	out	0x2e, r24	; 46
	TCCR1B|=(1<<ICNC1);				/* noice canceller					*/
     560:	8e b5       	in	r24, 0x2e	; 46
     562:	80 68       	ori	r24, 0x80	; 128
     564:	8e bd       	out	0x2e, r24	; 46
	TCCR1B&=~(1<<ICES1);			/* negative edge select				*/
     566:	8e b5       	in	r24, 0x2e	; 46
     568:	8f 7b       	andi	r24, 0xBF	; 191
     56a:	8e bd       	out	0x2e, r24	; 46
	DDRD&=~(1<<PD6);				/* Input capture pin (input)		*/
     56c:	8e 98       	cbi	0x11, 6	; 17
	DDRC|=(1<<LASERPIN);			/* Laser pin out					*/
     56e:	a0 9a       	sbi	0x14, 0	; 20
	DDRC|=(1<<SERINEPIN);			/*Serine pin out					*/
     570:	a1 9a       	sbi	0x14, 1	; 20
	TIMSK|=(1<<TOIE1);				/* Timer overflow interrupt			*/
     572:	89 b7       	in	r24, 0x39	; 57
     574:	84 60       	ori	r24, 0x04	; 4
     576:	89 bf       	out	0x39, r24	; 57
	TIMSK|=(1<<TICIE1);				/* input capture interrupt			*/
     578:	89 b7       	in	r24, 0x39	; 57
     57a:	80 62       	ori	r24, 0x20	; 32
     57c:	89 bf       	out	0x39, r24	; 57
	//GICR|=(1<<INT0);				/*External interrupt INT0 enable	*/
	MCUCR|=(1<<ISC00)|(1<<ISC01);	/*Interrupt executed on rising edge	*/
     57e:	85 b7       	in	r24, 0x35	; 53
     580:	83 60       	ori	r24, 0x03	; 3
     582:	85 bf       	out	0x35, r24	; 53
	sei();							/* set global interrupt				*/
     584:	78 94       	sei
	
}
     586:	08 95       	ret

00000588 <getCode>:

void getCode(uint16_t* NewBitTimeDuration,unsigned long* IrCommandBuffer,uint8_t* Iraddress,uint8_t* IrCommand, uint8_t* NewIrCommandFlag)
{
     588:	4f 92       	push	r4
     58a:	5f 92       	push	r5
     58c:	6f 92       	push	r6
     58e:	7f 92       	push	r7
     590:	8f 92       	push	r8
     592:	9f 92       	push	r9
     594:	af 92       	push	r10
     596:	bf 92       	push	r11
     598:	cf 92       	push	r12
     59a:	df 92       	push	r13
     59c:	ef 92       	push	r14
     59e:	ff 92       	push	r15
     5a0:	0f 93       	push	r16
     5a2:	1f 93       	push	r17
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
     5a8:	fc 01       	movw	r30, r24
     5aa:	eb 01       	movw	r28, r22
     5ac:	7a 01       	movw	r14, r20
     5ae:	69 01       	movw	r12, r18
	static unsigned char StartBit=32;
	static unsigned char CurrentBitPosition=0;
	
	if ((*NewBitTimeDuration)<1) /* negative value >> overflow */
     5b0:	80 81       	ld	r24, Z
     5b2:	91 81       	ldd	r25, Z+1	; 0x01
     5b4:	00 97       	sbiw	r24, 0x00	; 0
     5b6:	a9 f4       	brne	.+42     	; 0x5e2 <getCode+0x5a>
	{
		NewBitTime+=65536;
     5b8:	80 91 26 01 	lds	r24, 0x0126
     5bc:	90 91 27 01 	lds	r25, 0x0127
     5c0:	90 93 27 01 	sts	0x0127, r25
     5c4:	80 93 26 01 	sts	0x0126, r24
		if ((*NewBitTimeDuration)<1) /* still negative >> garbage time */
     5c8:	80 81       	ld	r24, Z
     5ca:	91 81       	ldd	r25, Z+1	; 0x01
     5cc:	00 97       	sbiw	r24, 0x00	; 0
     5ce:	49 f4       	brne	.+18     	; 0x5e2 <getCode+0x5a>
		{
			*IrCommandBuffer=0;
     5d0:	18 82       	st	Y, r1
     5d2:	19 82       	std	Y+1, r1	; 0x01
     5d4:	1a 82       	std	Y+2, r1	; 0x02
     5d6:	1b 82       	std	Y+3, r1	; 0x03
			CurrentBitPosition=0;
     5d8:	10 92 22 01 	sts	0x0122, r1
			StartBit=0;
     5dc:	10 92 20 01 	sts	0x0120, r1
			return;
     5e0:	8a c0       	rjmp	.+276    	; 0x6f6 <getCode+0x16e>
		}
	}
	
	if (StartBit==1)
     5e2:	80 91 20 01 	lds	r24, 0x0120
     5e6:	81 30       	cpi	r24, 0x01	; 1
     5e8:	09 f0       	breq	.+2      	; 0x5ec <getCode+0x64>
     5ea:	5d c0       	rjmp	.+186    	; 0x6a6 <getCode+0x11e>
	{
		if ((*NewBitTimeDuration)>=60 && (*NewBitTimeDuration)<=80) /* Time of Zero bit */
     5ec:	80 81       	ld	r24, Z
     5ee:	91 81       	ldd	r25, Z+1	; 0x01
     5f0:	9c 01       	movw	r18, r24
     5f2:	2c 53       	subi	r18, 0x3C	; 60
     5f4:	30 40       	sbci	r19, 0x00	; 0
     5f6:	25 31       	cpi	r18, 0x15	; 21
     5f8:	31 05       	cpc	r19, r1
     5fa:	28 f5       	brcc	.+74     	; 0x646 <getCode+0xbe>
		{
			*IrCommandBuffer&=~(1UL<<(--CurrentBitPosition));
     5fc:	88 80       	ld	r8, Y
     5fe:	99 80       	ldd	r9, Y+1	; 0x01
     600:	aa 80       	ldd	r10, Y+2	; 0x02
     602:	bb 80       	ldd	r11, Y+3	; 0x03
     604:	80 91 22 01 	lds	r24, 0x0122
     608:	81 50       	subi	r24, 0x01	; 1
     60a:	80 93 22 01 	sts	0x0122, r24
     60e:	41 e0       	ldi	r20, 0x01	; 1
     610:	50 e0       	ldi	r21, 0x00	; 0
     612:	60 e0       	ldi	r22, 0x00	; 0
     614:	70 e0       	ldi	r23, 0x00	; 0
     616:	2a 01       	movw	r4, r20
     618:	3b 01       	movw	r6, r22
     61a:	04 c0       	rjmp	.+8      	; 0x624 <getCode+0x9c>
     61c:	44 0c       	add	r4, r4
     61e:	55 1c       	adc	r5, r5
     620:	66 1c       	adc	r6, r6
     622:	77 1c       	adc	r7, r7
     624:	8a 95       	dec	r24
     626:	d2 f7       	brpl	.-12     	; 0x61c <getCode+0x94>
     628:	d3 01       	movw	r26, r6
     62a:	c2 01       	movw	r24, r4
     62c:	80 95       	com	r24
     62e:	90 95       	com	r25
     630:	a0 95       	com	r26
     632:	b0 95       	com	r27
     634:	88 21       	and	r24, r8
     636:	99 21       	and	r25, r9
     638:	aa 21       	and	r26, r10
     63a:	bb 21       	and	r27, r11
     63c:	88 83       	st	Y, r24
     63e:	99 83       	std	Y+1, r25	; 0x01
     640:	aa 83       	std	Y+2, r26	; 0x02
     642:	bb 83       	std	Y+3, r27	; 0x03
     644:	3e c0       	rjmp	.+124    	; 0x6c2 <getCode+0x13a>
		}
		else if ((*NewBitTimeDuration)>=130 && (*NewBitTimeDuration)<=150) /* Time of One bit */
     646:	82 58       	subi	r24, 0x82	; 130
     648:	90 40       	sbci	r25, 0x00	; 0
     64a:	85 31       	cpi	r24, 0x15	; 21
     64c:	91 05       	cpc	r25, r1
     64e:	08 f5       	brcc	.+66     	; 0x692 <getCode+0x10a>
		{
			*IrCommandBuffer|=(1UL<<(--CurrentBitPosition));
     650:	88 80       	ld	r8, Y
     652:	99 80       	ldd	r9, Y+1	; 0x01
     654:	aa 80       	ldd	r10, Y+2	; 0x02
     656:	bb 80       	ldd	r11, Y+3	; 0x03
     658:	80 91 22 01 	lds	r24, 0x0122
     65c:	81 50       	subi	r24, 0x01	; 1
     65e:	80 93 22 01 	sts	0x0122, r24
     662:	41 e0       	ldi	r20, 0x01	; 1
     664:	50 e0       	ldi	r21, 0x00	; 0
     666:	60 e0       	ldi	r22, 0x00	; 0
     668:	70 e0       	ldi	r23, 0x00	; 0
     66a:	2a 01       	movw	r4, r20
     66c:	3b 01       	movw	r6, r22
     66e:	04 c0       	rjmp	.+8      	; 0x678 <getCode+0xf0>
     670:	44 0c       	add	r4, r4
     672:	55 1c       	adc	r5, r5
     674:	66 1c       	adc	r6, r6
     676:	77 1c       	adc	r7, r7
     678:	8a 95       	dec	r24
     67a:	d2 f7       	brpl	.-12     	; 0x670 <getCode+0xe8>
     67c:	d3 01       	movw	r26, r6
     67e:	c2 01       	movw	r24, r4
     680:	88 29       	or	r24, r8
     682:	99 29       	or	r25, r9
     684:	aa 29       	or	r26, r10
     686:	bb 29       	or	r27, r11
     688:	88 83       	st	Y, r24
     68a:	99 83       	std	Y+1, r25	; 0x01
     68c:	aa 83       	std	Y+2, r26	; 0x02
     68e:	bb 83       	std	Y+3, r27	; 0x03
     690:	18 c0       	rjmp	.+48     	; 0x6c2 <getCode+0x13a>
		}
		else /*error IR bit time >> ignore the whole command and recieve new one*/
		{
			
			*IrCommandBuffer=0;
     692:	18 82       	st	Y, r1
     694:	19 82       	std	Y+1, r1	; 0x01
     696:	1a 82       	std	Y+2, r1	; 0x02
     698:	1b 82       	std	Y+3, r1	; 0x03
			CurrentBitPosition=32;
     69a:	80 e2       	ldi	r24, 0x20	; 32
     69c:	80 93 22 01 	sts	0x0122, r24
			StartBit=0;
     6a0:	10 92 20 01 	sts	0x0120, r1
			return;
     6a4:	28 c0       	rjmp	.+80     	; 0x6f6 <getCode+0x16e>
		}
		
		
	}
	else if((*NewBitTimeDuration)>=800 && (*NewBitTimeDuration)<=900)
     6a6:	80 81       	ld	r24, Z
     6a8:	91 81       	ldd	r25, Z+1	; 0x01
     6aa:	80 52       	subi	r24, 0x20	; 32
     6ac:	93 40       	sbci	r25, 0x03	; 3
     6ae:	85 36       	cpi	r24, 0x65	; 101
     6b0:	91 05       	cpc	r25, r1
     6b2:	38 f4       	brcc	.+14     	; 0x6c2 <getCode+0x13a>
	{
		StartBit=1;
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	80 93 20 01 	sts	0x0120, r24
		*IrCommandBuffer=0;
     6ba:	18 82       	st	Y, r1
     6bc:	19 82       	std	Y+1, r1	; 0x01
     6be:	1a 82       	std	Y+2, r1	; 0x02
     6c0:	1b 82       	std	Y+3, r1	; 0x03
	}
	
	if(CurrentBitPosition==0)
     6c2:	80 91 22 01 	lds	r24, 0x0122
     6c6:	88 23       	and	r24, r24
     6c8:	b1 f4       	brne	.+44     	; 0x6f6 <getCode+0x16e>
	{
		*Iraddress=(char)((*IrCommandBuffer)>>16);
     6ca:	88 81       	ld	r24, Y
     6cc:	99 81       	ldd	r25, Y+1	; 0x01
     6ce:	aa 81       	ldd	r26, Y+2	; 0x02
     6d0:	bb 81       	ldd	r27, Y+3	; 0x03
     6d2:	cd 01       	movw	r24, r26
     6d4:	aa 27       	eor	r26, r26
     6d6:	bb 27       	eor	r27, r27
     6d8:	f7 01       	movw	r30, r14
     6da:	80 83       	st	Z, r24
		if (*Iraddress==DEVICEADDRESS)
     6dc:	8f 37       	cpi	r24, 0x7F	; 127
     6de:	31 f4       	brne	.+12     	; 0x6ec <getCode+0x164>
		{
			*IrCommand=(char)(*IrCommandBuffer);
     6e0:	88 81       	ld	r24, Y
     6e2:	f6 01       	movw	r30, r12
     6e4:	80 83       	st	Z, r24
			*NewIrCommandFlag=1;
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	f8 01       	movw	r30, r16
     6ea:	80 83       	st	Z, r24
		}
		CurrentBitPosition=32;
     6ec:	80 e2       	ldi	r24, 0x20	; 32
     6ee:	80 93 22 01 	sts	0x0122, r24
		StartBit=0;
     6f2:	10 92 20 01 	sts	0x0120, r1
		
	}
	
}
     6f6:	df 91       	pop	r29
     6f8:	cf 91       	pop	r28
     6fa:	1f 91       	pop	r17
     6fc:	0f 91       	pop	r16
     6fe:	ff 90       	pop	r15
     700:	ef 90       	pop	r14
     702:	df 90       	pop	r13
     704:	cf 90       	pop	r12
     706:	bf 90       	pop	r11
     708:	af 90       	pop	r10
     70a:	9f 90       	pop	r9
     70c:	8f 90       	pop	r8
     70e:	7f 90       	pop	r7
     710:	6f 90       	pop	r6
     712:	5f 90       	pop	r5
     714:	4f 90       	pop	r4
     716:	08 95       	ret

00000718 <GetPassword>:

void GetPassword(uint8_t* IrAddress,uint8_t* IrCommand,uint8_t* PasswordFlag,uint8_t* Password,uint8_t* LcdFlag)
{
     718:	0f 93       	push	r16
     71a:	1f 93       	push	r17
	static uint8_t PasswordIndex=0;
	
	if (*IrAddress==DEVICEADDRESS)
     71c:	fc 01       	movw	r30, r24
     71e:	80 81       	ld	r24, Z
     720:	8f 37       	cpi	r24, 0x7F	; 127
     722:	09 f0       	breq	.+2      	; 0x726 <GetPassword+0xe>
     724:	de c0       	rjmp	.+444    	; 0x8e2 <__stack+0x83>
	{
		if (*IrCommand==POWER)
     726:	fb 01       	movw	r30, r22
     728:	80 81       	ld	r24, Z
     72a:	8f 3f       	cpi	r24, 0xFF	; 255
     72c:	b1 f4       	brne	.+44     	; 0x75a <GetPassword+0x42>
		{
			if (PasswordIndex<PASSMAXLENGTH)
     72e:	80 91 23 01 	lds	r24, 0x0123
     732:	8a 30       	cpi	r24, 0x0A	; 10
     734:	28 f4       	brcc	.+10     	; 0x740 <GetPassword+0x28>
			{
				Password[PasswordIndex]=0;
     736:	f9 01       	movw	r30, r18
     738:	e8 0f       	add	r30, r24
     73a:	f1 1d       	adc	r31, r1
     73c:	10 82       	st	Z, r1
     73e:	02 c0       	rjmp	.+4      	; 0x744 <GetPassword+0x2c>
			}
			else
			{
				Password[PASSMAXLENGTH]=0;
     740:	f9 01       	movw	r30, r18
     742:	12 86       	std	Z+10, r1	; 0x0a
			}
			
			*PasswordFlag=NEWPASSWORD;
     744:	87 e0       	ldi	r24, 0x07	; 7
     746:	fa 01       	movw	r30, r20
     748:	80 83       	st	Z, r24
			*LcdFlag=NEWPASSWORD;
     74a:	f8 01       	movw	r30, r16
     74c:	80 83       	st	Z, r24
			PasswordIndex=0;
     74e:	10 92 23 01 	sts	0x0123, r1
			USART_WRITE_STRING(Password);
     752:	c9 01       	movw	r24, r18
     754:	0e 94 56 00 	call	0xac	; 0xac <USART_WRITE_STRING>
     758:	c4 c0       	rjmp	.+392    	; 0x8e2 <__stack+0x83>
			
		}
		else if (PasswordIndex<PASSMAXLENGTH)
     75a:	80 91 23 01 	lds	r24, 0x0123
     75e:	8a 30       	cpi	r24, 0x0A	; 10
     760:	08 f0       	brcs	.+2      	; 0x764 <GetPassword+0x4c>
     762:	bf c0       	rjmp	.+382    	; 0x8e2 <__stack+0x83>
		{
			
			*LcdFlag=RECIEVINGPASSWORD;
     764:	99 e0       	ldi	r25, 0x09	; 9
     766:	f8 01       	movw	r30, r16
     768:	90 83       	st	Z, r25
			switch(*IrCommand)
     76a:	fb 01       	movw	r30, r22
     76c:	90 81       	ld	r25, Z
     76e:	95 3a       	cpi	r25, 0xA5	; 165
     770:	09 f4       	brne	.+2      	; 0x774 <GetPassword+0x5c>
     772:	70 c0       	rjmp	.+224    	; 0x854 <GetPassword+0x13c>
     774:	96 3a       	cpi	r25, 0xA6	; 166
     776:	88 f4       	brcc	.+34     	; 0x79a <GetPassword+0x82>
     778:	9f 37       	cpi	r25, 0x7F	; 127
     77a:	81 f1       	breq	.+96     	; 0x7dc <GetPassword+0xc4>
     77c:	90 38       	cpi	r25, 0x80	; 128
     77e:	38 f4       	brcc	.+14     	; 0x78e <GetPassword+0x76>
     780:	9d 33       	cpi	r25, 0x3D	; 61
     782:	09 f4       	brne	.+2      	; 0x786 <GetPassword+0x6e>
     784:	97 c0       	rjmp	.+302    	; 0x8b4 <__stack+0x55>
     786:	9f 34       	cpi	r25, 0x4F	; 79
     788:	09 f0       	breq	.+2      	; 0x78c <GetPassword+0x74>
     78a:	ab c0       	rjmp	.+342    	; 0x8e2 <__stack+0x83>
     78c:	9f c0       	rjmp	.+318    	; 0x8cc <__stack+0x6d>
     78e:	97 39       	cpi	r25, 0x97	; 151
     790:	c9 f0       	breq	.+50     	; 0x7c4 <GetPassword+0xac>
     792:	9f 39       	cpi	r25, 0x9F	; 159
     794:	09 f0       	breq	.+2      	; 0x798 <GetPassword+0x80>
     796:	a5 c0       	rjmp	.+330    	; 0x8e2 <__stack+0x83>
     798:	39 c0       	rjmp	.+114    	; 0x80c <GetPassword+0xf4>
     79a:	9d 3b       	cpi	r25, 0xBD	; 189
     79c:	09 f4       	brne	.+2      	; 0x7a0 <GetPassword+0x88>
     79e:	66 c0       	rjmp	.+204    	; 0x86c <__stack+0xd>
     7a0:	9e 3b       	cpi	r25, 0xBE	; 190
     7a2:	38 f4       	brcc	.+14     	; 0x7b2 <GetPassword+0x9a>
     7a4:	9d 3a       	cpi	r25, 0xAD	; 173
     7a6:	09 f4       	brne	.+2      	; 0x7aa <GetPassword+0x92>
     7a8:	79 c0       	rjmp	.+242    	; 0x89c <__stack+0x3d>
     7aa:	95 3b       	cpi	r25, 0xB5	; 181
     7ac:	09 f0       	breq	.+2      	; 0x7b0 <GetPassword+0x98>
     7ae:	99 c0       	rjmp	.+306    	; 0x8e2 <__stack+0x83>
     7b0:	69 c0       	rjmp	.+210    	; 0x884 <__stack+0x25>
     7b2:	97 3c       	cpi	r25, 0xC7	; 199
     7b4:	09 f4       	brne	.+2      	; 0x7b8 <GetPassword+0xa0>
     7b6:	42 c0       	rjmp	.+132    	; 0x83c <GetPassword+0x124>
     7b8:	9f 3e       	cpi	r25, 0xEF	; 239
     7ba:	a1 f1       	breq	.+104    	; 0x824 <GetPassword+0x10c>
     7bc:	9f 3b       	cpi	r25, 0xBF	; 191
     7be:	09 f0       	breq	.+2      	; 0x7c2 <GetPassword+0xaa>
     7c0:	90 c0       	rjmp	.+288    	; 0x8e2 <__stack+0x83>
     7c2:	18 c0       	rjmp	.+48     	; 0x7f4 <GetPassword+0xdc>
			{
				case ZERO:
				Password[PasswordIndex++]='0';
     7c4:	28 0f       	add	r18, r24
     7c6:	31 1d       	adc	r19, r1
     7c8:	90 e3       	ldi	r25, 0x30	; 48
     7ca:	f9 01       	movw	r30, r18
     7cc:	90 83       	st	Z, r25
     7ce:	8f 5f       	subi	r24, 0xFF	; 255
     7d0:	80 93 23 01 	sts	0x0123, r24
				USART_WRITE_BYTE('0');
     7d4:	80 e3       	ldi	r24, 0x30	; 48
     7d6:	0e 94 52 00 	call	0xa4	; 0xa4 <USART_WRITE_BYTE>
				break;
     7da:	83 c0       	rjmp	.+262    	; 0x8e2 <__stack+0x83>
				case ONE:
				Password[PasswordIndex++]='1';
     7dc:	28 0f       	add	r18, r24
     7de:	31 1d       	adc	r19, r1
     7e0:	91 e3       	ldi	r25, 0x31	; 49
     7e2:	f9 01       	movw	r30, r18
     7e4:	90 83       	st	Z, r25
     7e6:	8f 5f       	subi	r24, 0xFF	; 255
     7e8:	80 93 23 01 	sts	0x0123, r24
				USART_WRITE_BYTE('1');
     7ec:	81 e3       	ldi	r24, 0x31	; 49
     7ee:	0e 94 52 00 	call	0xa4	; 0xa4 <USART_WRITE_BYTE>
				break;
     7f2:	77 c0       	rjmp	.+238    	; 0x8e2 <__stack+0x83>
				case TWO:
				Password[PasswordIndex++]='2';
     7f4:	28 0f       	add	r18, r24
     7f6:	31 1d       	adc	r19, r1
     7f8:	92 e3       	ldi	r25, 0x32	; 50
     7fa:	f9 01       	movw	r30, r18
     7fc:	90 83       	st	Z, r25
     7fe:	8f 5f       	subi	r24, 0xFF	; 255
     800:	80 93 23 01 	sts	0x0123, r24
				USART_WRITE_BYTE('2');
     804:	82 e3       	ldi	r24, 0x32	; 50
     806:	0e 94 52 00 	call	0xa4	; 0xa4 <USART_WRITE_BYTE>
				break;
     80a:	6b c0       	rjmp	.+214    	; 0x8e2 <__stack+0x83>
				case THREE:
				Password[PasswordIndex++]='3';
     80c:	28 0f       	add	r18, r24
     80e:	31 1d       	adc	r19, r1
     810:	93 e3       	ldi	r25, 0x33	; 51
     812:	f9 01       	movw	r30, r18
     814:	90 83       	st	Z, r25
     816:	8f 5f       	subi	r24, 0xFF	; 255
     818:	80 93 23 01 	sts	0x0123, r24
				USART_WRITE_BYTE('3');
     81c:	83 e3       	ldi	r24, 0x33	; 51
     81e:	0e 94 52 00 	call	0xa4	; 0xa4 <USART_WRITE_BYTE>
				break;
     822:	5f c0       	rjmp	.+190    	; 0x8e2 <__stack+0x83>
				case FOUR:
				Password[PasswordIndex++]='4';
     824:	28 0f       	add	r18, r24
     826:	31 1d       	adc	r19, r1
     828:	94 e3       	ldi	r25, 0x34	; 52
     82a:	f9 01       	movw	r30, r18
     82c:	90 83       	st	Z, r25
     82e:	8f 5f       	subi	r24, 0xFF	; 255
     830:	80 93 23 01 	sts	0x0123, r24
				USART_WRITE_BYTE('4');
     834:	84 e3       	ldi	r24, 0x34	; 52
     836:	0e 94 52 00 	call	0xa4	; 0xa4 <USART_WRITE_BYTE>
				break;
     83a:	53 c0       	rjmp	.+166    	; 0x8e2 <__stack+0x83>
				case FIVE:
				Password[PasswordIndex++]='5';
     83c:	28 0f       	add	r18, r24
     83e:	31 1d       	adc	r19, r1
     840:	95 e3       	ldi	r25, 0x35	; 53
     842:	f9 01       	movw	r30, r18
     844:	90 83       	st	Z, r25
     846:	8f 5f       	subi	r24, 0xFF	; 255
     848:	80 93 23 01 	sts	0x0123, r24
				USART_WRITE_BYTE('5');
     84c:	85 e3       	ldi	r24, 0x35	; 53
     84e:	0e 94 52 00 	call	0xa4	; 0xa4 <USART_WRITE_BYTE>
				break;
     852:	47 c0       	rjmp	.+142    	; 0x8e2 <__stack+0x83>
				case SIX:
				Password[PasswordIndex++]='6';
     854:	28 0f       	add	r18, r24
     856:	31 1d       	adc	r19, r1
     858:	96 e3       	ldi	r25, 0x36	; 54
     85a:	f9 01       	movw	r30, r18
     85c:	90 83       	st	Z, r25
     85e:	8f 5f       	subi	r24, 0xFF	; 255
     860:	80 93 23 01 	sts	0x0123, r24
				USART_WRITE_BYTE('6');
     864:	86 e3       	ldi	r24, 0x36	; 54
     866:	0e 94 52 00 	call	0xa4	; 0xa4 <USART_WRITE_BYTE>
				break;
     86a:	3b c0       	rjmp	.+118    	; 0x8e2 <__stack+0x83>
				case SEVEN:
				Password[PasswordIndex++]='7';
     86c:	28 0f       	add	r18, r24
     86e:	31 1d       	adc	r19, r1
     870:	97 e3       	ldi	r25, 0x37	; 55
     872:	f9 01       	movw	r30, r18
     874:	90 83       	st	Z, r25
     876:	8f 5f       	subi	r24, 0xFF	; 255
     878:	80 93 23 01 	sts	0x0123, r24
				USART_WRITE_BYTE('7');
     87c:	87 e3       	ldi	r24, 0x37	; 55
     87e:	0e 94 52 00 	call	0xa4	; 0xa4 <USART_WRITE_BYTE>
				break;
     882:	2f c0       	rjmp	.+94     	; 0x8e2 <__stack+0x83>
				case EIGHT:
				Password[PasswordIndex++]='8';
     884:	28 0f       	add	r18, r24
     886:	31 1d       	adc	r19, r1
     888:	98 e3       	ldi	r25, 0x38	; 56
     88a:	f9 01       	movw	r30, r18
     88c:	90 83       	st	Z, r25
     88e:	8f 5f       	subi	r24, 0xFF	; 255
     890:	80 93 23 01 	sts	0x0123, r24
				USART_WRITE_BYTE('8');
     894:	88 e3       	ldi	r24, 0x38	; 56
     896:	0e 94 52 00 	call	0xa4	; 0xa4 <USART_WRITE_BYTE>
				break;
     89a:	23 c0       	rjmp	.+70     	; 0x8e2 <__stack+0x83>
				case NINE:
				Password[PasswordIndex++]='9';
     89c:	28 0f       	add	r18, r24
     89e:	31 1d       	adc	r19, r1
     8a0:	99 e3       	ldi	r25, 0x39	; 57
     8a2:	f9 01       	movw	r30, r18
     8a4:	90 83       	st	Z, r25
     8a6:	8f 5f       	subi	r24, 0xFF	; 255
     8a8:	80 93 23 01 	sts	0x0123, r24
				USART_WRITE_BYTE('9');
     8ac:	89 e3       	ldi	r24, 0x39	; 57
     8ae:	0e 94 52 00 	call	0xa4	; 0xa4 <USART_WRITE_BYTE>
				break;
     8b2:	17 c0       	rjmp	.+46     	; 0x8e2 <__stack+0x83>
				case PLAY:
				Password[PasswordIndex++]='p';
     8b4:	28 0f       	add	r18, r24
     8b6:	31 1d       	adc	r19, r1
     8b8:	90 e7       	ldi	r25, 0x70	; 112
     8ba:	f9 01       	movw	r30, r18
     8bc:	90 83       	st	Z, r25
     8be:	8f 5f       	subi	r24, 0xFF	; 255
     8c0:	80 93 23 01 	sts	0x0123, r24
				USART_WRITE_BYTE('p');
     8c4:	80 e7       	ldi	r24, 0x70	; 112
     8c6:	0e 94 52 00 	call	0xa4	; 0xa4 <USART_WRITE_BYTE>
				break;
     8ca:	0b c0       	rjmp	.+22     	; 0x8e2 <__stack+0x83>
				case BACK:
				Password[--PasswordIndex]='0';
     8cc:	81 50       	subi	r24, 0x01	; 1
     8ce:	80 93 23 01 	sts	0x0123, r24
     8d2:	28 0f       	add	r18, r24
     8d4:	31 1d       	adc	r19, r1
     8d6:	80 e3       	ldi	r24, 0x30	; 48
     8d8:	f9 01       	movw	r30, r18
     8da:	80 83       	st	Z, r24
				*LcdFlag=BACKONEDIGIT;
     8dc:	8a e0       	ldi	r24, 0x0A	; 10
     8de:	f8 01       	movw	r30, r16
     8e0:	80 83       	st	Z, r24
			
			
		}
	
	}	
}
     8e2:	1f 91       	pop	r17
     8e4:	0f 91       	pop	r16
     8e6:	08 95       	ret

000008e8 <CheckPassword>:

void CheckPassword(uint8_t* Password,uint8_t* PasswordFlag,uint8_t* LcdFlag)
{
     8e8:	ef 92       	push	r14
     8ea:	ff 92       	push	r15
     8ec:	0f 93       	push	r16
     8ee:	1f 93       	push	r17
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
     8f4:	ec 01       	movw	r28, r24
     8f6:	8b 01       	movw	r16, r22
     8f8:	7a 01       	movw	r14, r20
	USART_WRITE_STRING("check");
     8fa:	80 e6       	ldi	r24, 0x60	; 96
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	0e 94 56 00 	call	0xac	; 0xac <USART_WRITE_STRING>
	if (*Password==NULL)
     902:	88 81       	ld	r24, Y
     904:	88 23       	and	r24, r24
     906:	31 f4       	brne	.+12     	; 0x914 <CheckPassword+0x2c>
	{
		*PasswordFlag=EMPTYPASSWORD;
     908:	86 e0       	ldi	r24, 0x06	; 6
     90a:	f8 01       	movw	r30, r16
     90c:	80 83       	st	Z, r24
		*LcdFlag=EMPTYPASSWORD;
     90e:	f7 01       	movw	r30, r14
     910:	80 83       	st	Z, r24
     912:	15 c0       	rjmp	.+42     	; 0x93e <CheckPassword+0x56>
		
	}
	else if(!strcmp(Password,SYSTEMPASSWORD))
     914:	ce 01       	movw	r24, r28
     916:	66 e6       	ldi	r22, 0x66	; 102
     918:	70 e0       	ldi	r23, 0x00	; 0
     91a:	0e 94 72 08 	call	0x10e4	; 0x10e4 <strcmp>
     91e:	28 2f       	mov	r18, r24
     920:	39 2f       	mov	r19, r25
     922:	21 15       	cp	r18, r1
     924:	31 05       	cpc	r19, r1
     926:	31 f4       	brne	.+12     	; 0x934 <CheckPassword+0x4c>
	{
		*PasswordFlag=CORRECT;
     928:	84 e0       	ldi	r24, 0x04	; 4
     92a:	f8 01       	movw	r30, r16
     92c:	80 83       	st	Z, r24
		*LcdFlag=CORRECT;
     92e:	f7 01       	movw	r30, r14
     930:	80 83       	st	Z, r24
     932:	05 c0       	rjmp	.+10     	; 0x93e <CheckPassword+0x56>
		
	}
	else
	{
		*PasswordFlag=INCORRECT;
     934:	85 e0       	ldi	r24, 0x05	; 5
     936:	f8 01       	movw	r30, r16
     938:	80 83       	st	Z, r24
		*LcdFlag=INCORRECT;
     93a:	f7 01       	movw	r30, r14
     93c:	80 83       	st	Z, r24
		
	}
	
}
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	1f 91       	pop	r17
     944:	0f 91       	pop	r16
     946:	ff 90       	pop	r15
     948:	ef 90       	pop	r14
     94a:	08 95       	ret

0000094c <ExecuteIrCmd>:

void ExecuteIrCmd(uint8_t* IrCommand,uint8_t* LcdFlag)
{
	static uint8_t CommandStatus=NOCOMMANDSELECTED;
	static uint8_t Command=0;
	if (CommandStatus==NOCOMMANDSELECTED)
     94c:	20 91 21 01 	lds	r18, 0x0121
     950:	2b 30       	cpi	r18, 0x0B	; 11
     952:	69 f4       	brne	.+26     	; 0x96e <ExecuteIrCmd+0x22>
	{
		if (*IrCommand==PLAY)
     954:	fc 01       	movw	r30, r24
     956:	80 81       	ld	r24, Z
     958:	8d 33       	cpi	r24, 0x3D	; 61
     95a:	49 f5       	brne	.+82     	; 0x9ae <ExecuteIrCmd+0x62>
		{
			CommandStatus=COMMANDSELECTED;
     95c:	8c e0       	ldi	r24, 0x0C	; 12
     95e:	80 93 21 01 	sts	0x0121, r24
			Command=*IrCommand;
     962:	9d e3       	ldi	r25, 0x3D	; 61
     964:	90 93 24 01 	sts	0x0124, r25
			*LcdFlag=COMMANDSELECTED;
     968:	fb 01       	movw	r30, r22
     96a:	80 83       	st	Z, r24
     96c:	08 95       	ret
		}
		
	}
	else
	{
		if (*IrCommand==POWER)
     96e:	fc 01       	movw	r30, r24
     970:	80 81       	ld	r24, Z
     972:	8f 3f       	cpi	r24, 0xFF	; 255
     974:	a1 f4       	brne	.+40     	; 0x99e <ExecuteIrCmd+0x52>
		{
			CommandStatus=NOCOMMANDSELECTED;
     976:	8b e0       	ldi	r24, 0x0B	; 11
     978:	80 93 21 01 	sts	0x0121, r24
			*LcdFlag=NOCOMMANDSELECTED;
     97c:	fb 01       	movw	r30, r22
     97e:	80 83       	st	Z, r24
			if (ALARMSYSSTATUS==OFF)
     980:	80 91 1c 01 	lds	r24, 0x011C
     984:	8e 30       	cpi	r24, 0x0E	; 14
     986:	31 f4       	brne	.+12     	; 0x994 <ExecuteIrCmd+0x48>
			{
				ALARMSYSSTATUS=ON;
     988:	8d e0       	ldi	r24, 0x0D	; 13
     98a:	80 93 1c 01 	sts	0x011C, r24
				PORTC=0xff;
     98e:	8f ef       	ldi	r24, 0xFF	; 255
     990:	85 bb       	out	0x15, r24	; 21
     992:	08 95       	ret
			}
			else
			{
				ALARMSYSSTATUS=OFF;
     994:	8e e0       	ldi	r24, 0x0E	; 14
     996:	80 93 1c 01 	sts	0x011C, r24
				PORTC=0x00;
     99a:	15 ba       	out	0x15, r1	; 21
     99c:	08 95       	ret
			}
			
		}
		else if (*IrCommand==BACK)
     99e:	8f 34       	cpi	r24, 0x4F	; 79
     9a0:	31 f4       	brne	.+12     	; 0x9ae <ExecuteIrCmd+0x62>
		{
			CommandStatus=NOCOMMANDSELECTED;
     9a2:	8b e0       	ldi	r24, 0x0B	; 11
     9a4:	80 93 21 01 	sts	0x0121, r24
			*LcdFlag=BACK;
     9a8:	8f e4       	ldi	r24, 0x4F	; 79
     9aa:	fb 01       	movw	r30, r22
     9ac:	80 83       	st	Z, r24
     9ae:	08 95       	ret

000009b0 <LcdUpdate>:
}



void LcdUpdate(uint8_t* LcdUpdateFlag)
{
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
     9b4:	ec 01       	movw	r28, r24
	
	
	switch(*LcdUpdateFlag)
     9b6:	88 81       	ld	r24, Y
     9b8:	86 30       	cpi	r24, 0x06	; 6
     9ba:	09 f4       	brne	.+2      	; 0x9be <LcdUpdate+0xe>
     9bc:	47 c0       	rjmp	.+142    	; 0xa4c <LcdUpdate+0x9c>
     9be:	87 30       	cpi	r24, 0x07	; 7
     9c0:	88 f4       	brcc	.+34     	; 0x9e4 <LcdUpdate+0x34>
     9c2:	83 30       	cpi	r24, 0x03	; 3
     9c4:	49 f1       	breq	.+82     	; 0xa18 <LcdUpdate+0x68>
     9c6:	84 30       	cpi	r24, 0x04	; 4
     9c8:	30 f4       	brcc	.+12     	; 0x9d6 <LcdUpdate+0x26>
     9ca:	81 30       	cpi	r24, 0x01	; 1
     9cc:	e9 f0       	breq	.+58     	; 0xa08 <LcdUpdate+0x58>
     9ce:	82 30       	cpi	r24, 0x02	; 2
     9d0:	09 f0       	breq	.+2      	; 0x9d4 <LcdUpdate+0x24>
     9d2:	b3 c0       	rjmp	.+358    	; 0xb3a <LcdUpdate+0x18a>
     9d4:	5b c0       	rjmp	.+182    	; 0xa8c <LcdUpdate+0xdc>
     9d6:	84 30       	cpi	r24, 0x04	; 4
     9d8:	09 f4       	brne	.+2      	; 0x9dc <LcdUpdate+0x2c>
     9da:	50 c0       	rjmp	.+160    	; 0xa7c <LcdUpdate+0xcc>
     9dc:	85 30       	cpi	r24, 0x05	; 5
     9de:	09 f0       	breq	.+2      	; 0x9e2 <LcdUpdate+0x32>
     9e0:	ac c0       	rjmp	.+344    	; 0xb3a <LcdUpdate+0x18a>
     9e2:	40 c0       	rjmp	.+128    	; 0xa64 <LcdUpdate+0xb4>
     9e4:	8b 30       	cpi	r24, 0x0B	; 11
     9e6:	09 f4       	brne	.+2      	; 0x9ea <LcdUpdate+0x3a>
     9e8:	8d c0       	rjmp	.+282    	; 0xb04 <LcdUpdate+0x154>
     9ea:	8c 30       	cpi	r24, 0x0C	; 12
     9ec:	30 f4       	brcc	.+12     	; 0x9fa <LcdUpdate+0x4a>
     9ee:	89 30       	cpi	r24, 0x09	; 9
     9f0:	f9 f0       	breq	.+62     	; 0xa30 <LcdUpdate+0x80>
     9f2:	8a 30       	cpi	r24, 0x0A	; 10
     9f4:	09 f0       	breq	.+2      	; 0x9f8 <LcdUpdate+0x48>
     9f6:	a1 c0       	rjmp	.+322    	; 0xb3a <LcdUpdate+0x18a>
     9f8:	1f c0       	rjmp	.+62     	; 0xa38 <LcdUpdate+0x88>
     9fa:	8c 30       	cpi	r24, 0x0C	; 12
     9fc:	09 f4       	brne	.+2      	; 0xa00 <LcdUpdate+0x50>
     9fe:	4e c0       	rjmp	.+156    	; 0xa9c <LcdUpdate+0xec>
     a00:	8f 34       	cpi	r24, 0x4F	; 79
     a02:	09 f0       	breq	.+2      	; 0xa06 <LcdUpdate+0x56>
     a04:	9a c0       	rjmp	.+308    	; 0xb3a <LcdUpdate+0x18a>
     a06:	92 c0       	rjmp	.+292    	; 0xb2c <LcdUpdate+0x17c>
	{
		case LOCKED:
		//lcd backlight off (case battery )
		LCD_CMD(_LCD_CLEAR);
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_CMD>
		LCD_Write_String("Welcome ..");
     a0e:	8a e6       	ldi	r24, 0x6A	; 106
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_Write_String>
		break;
     a16:	91 c0       	rjmp	.+290    	; 0xb3a <LcdUpdate+0x18a>
		case READY:
		LCD_CMD(_LCD_CLEAR);
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_CMD>
		LCD_Write_String("Enter password :");
     a1e:	85 e7       	ldi	r24, 0x75	; 117
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_Write_String>
		_lcd_goto_xy(2,1);
     a26:	82 e0       	ldi	r24, 0x02	; 2
     a28:	61 e0       	ldi	r22, 0x01	; 1
     a2a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_lcd_goto_xy>
		break;
     a2e:	85 c0       	rjmp	.+266    	; 0xb3a <LcdUpdate+0x18a>
		case RECIEVINGPASSWORD :
		LCD_Write_Character('*');
     a30:	8a e2       	ldi	r24, 0x2A	; 42
     a32:	0e 94 a3 01 	call	0x346	; 0x346 <LCD_Write_Character>
		break;
     a36:	81 c0       	rjmp	.+258    	; 0xb3a <LcdUpdate+0x18a>
		case BACKONEDIGIT:
		LCD_CMD(_LCD_CURSOR_SHIFT_LIFT);
     a38:	80 e1       	ldi	r24, 0x10	; 16
     a3a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_CMD>
		LCD_Write_Character(' ');
     a3e:	80 e2       	ldi	r24, 0x20	; 32
     a40:	0e 94 a3 01 	call	0x346	; 0x346 <LCD_Write_Character>
		LCD_CMD(_LCD_CURSOR_SHIFT_LIFT);
     a44:	80 e1       	ldi	r24, 0x10	; 16
     a46:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_CMD>
		break;
     a4a:	77 c0       	rjmp	.+238    	; 0xb3a <LcdUpdate+0x18a>
		case EMPTYPASSWORD :
		LCD_CMD(_LCD_CLEAR);
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_CMD>
		LCD_Write_String("Empty password");
     a52:	86 e8       	ldi	r24, 0x86	; 134
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_Write_String>
		_lcd_goto_xy(2,1);
     a5a:	82 e0       	ldi	r24, 0x02	; 2
     a5c:	61 e0       	ldi	r22, 0x01	; 1
     a5e:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_lcd_goto_xy>
		break;
     a62:	6b c0       	rjmp	.+214    	; 0xb3a <LcdUpdate+0x18a>
		case INCORRECT:
		LCD_CMD(_LCD_CLEAR);
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_CMD>
		LCD_Write_String("Incorrect password");
     a6a:	85 e9       	ldi	r24, 0x95	; 149
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_Write_String>
		_lcd_goto_xy(2,1);
     a72:	82 e0       	ldi	r24, 0x02	; 2
     a74:	61 e0       	ldi	r22, 0x01	; 1
     a76:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_lcd_goto_xy>
		break;
     a7a:	5f c0       	rjmp	.+190    	; 0xb3a <LcdUpdate+0x18a>
		case CORRECT :
		LCD_CMD(_LCD_CLEAR);
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_CMD>
		LCD_Write_String("Select option :");
     a82:	88 ea       	ldi	r24, 0xA8	; 168
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_Write_String>
		break;
     a8a:	57 c0       	rjmp	.+174    	; 0xb3a <LcdUpdate+0x18a>
		case UNLOCKED:
		LCD_CMD(_LCD_CLEAR);
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_CMD>
		LCD_Write_String("Select an option :");
     a92:	88 eb       	ldi	r24, 0xB8	; 184
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_Write_String>
		break;
     a9a:	4f c0       	rjmp	.+158    	; 0xb3a <LcdUpdate+0x18a>
		case COMMANDSELECTED:
		if (ALARMSYSSTATUS==OFF)
     a9c:	80 91 1c 01 	lds	r24, 0x011C
     aa0:	8e 30       	cpi	r24, 0x0E	; 14
     aa2:	c1 f4       	brne	.+48     	; 0xad4 <LcdUpdate+0x124>
		{
			LCD_CMD(_LCD_CLEAR);
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_CMD>
			LCD_Write_String("Switch on  ?");
     aaa:	8b ec       	ldi	r24, 0xCB	; 203
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_Write_String>
			_lcd_goto_xy(2,1);
     ab2:	82 e0       	ldi	r24, 0x02	; 2
     ab4:	61 e0       	ldi	r22, 0x01	; 1
     ab6:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_lcd_goto_xy>
			LCD_Write_String("yes");
     aba:	88 ed       	ldi	r24, 0xD8	; 216
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_Write_String>
			_lcd_goto_xy(2,9);
     ac2:	82 e0       	ldi	r24, 0x02	; 2
     ac4:	69 e0       	ldi	r22, 0x09	; 9
     ac6:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_lcd_goto_xy>
			LCD_Write_String("no");
     aca:	8c ed       	ldi	r24, 0xDC	; 220
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_Write_String>
     ad2:	33 c0       	rjmp	.+102    	; 0xb3a <LcdUpdate+0x18a>
		}
		else
		{
			LCD_CMD(_LCD_CLEAR);
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_CMD>
			LCD_Write_String("Switch off  ?");
     ada:	8f ed       	ldi	r24, 0xDF	; 223
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_Write_String>
			_lcd_goto_xy(2,1);
     ae2:	82 e0       	ldi	r24, 0x02	; 2
     ae4:	61 e0       	ldi	r22, 0x01	; 1
     ae6:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_lcd_goto_xy>
			LCD_Write_String("yes");
     aea:	88 ed       	ldi	r24, 0xD8	; 216
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_Write_String>
			_lcd_goto_xy(2,9);
     af2:	82 e0       	ldi	r24, 0x02	; 2
     af4:	69 e0       	ldi	r22, 0x09	; 9
     af6:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_lcd_goto_xy>
			LCD_Write_String("no");
     afa:	8c ed       	ldi	r24, 0xDC	; 220
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_Write_String>
     b02:	1b c0       	rjmp	.+54     	; 0xb3a <LcdUpdate+0x18a>
		}
		break;
		case NOCOMMANDSELECTED:
		if (ALARMSYSSTATUS==ON)
     b04:	80 91 1c 01 	lds	r24, 0x011C
     b08:	8d 30       	cpi	r24, 0x0D	; 13
     b0a:	41 f4       	brne	.+16     	; 0xb1c <LcdUpdate+0x16c>
		{
			LCD_CMD(_LCD_CLEAR);
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_CMD>
			LCD_Write_String("System started");
     b12:	8d ee       	ldi	r24, 0xED	; 237
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_Write_String>
     b1a:	0f c0       	rjmp	.+30     	; 0xb3a <LcdUpdate+0x18a>
		}
		else
		{
			LCD_CMD(_LCD_CLEAR);
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_CMD>
			LCD_Write_String("System stopped");
     b22:	8c ef       	ldi	r24, 0xFC	; 252
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_Write_String>
     b2a:	07 c0       	rjmp	.+14     	; 0xb3a <LcdUpdate+0x18a>
		}
		break;
		case BACK:
		LCD_CMD(_LCD_CLEAR);
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_CMD>
		LCD_Write_String("Select option :");
     b32:	88 ea       	ldi	r24, 0xA8	; 168
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_Write_String>
		break;
		
	}
	*LcdUpdateFlag=0;
     b3a:	18 82       	st	Y, r1
}
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	08 95       	ret

00000b42 <main>:


int main(void)
{
     b42:	cf 93       	push	r28
     b44:	df 93       	push	r29
     b46:	cd b7       	in	r28, 0x3d	; 61
     b48:	de b7       	in	r29, 0x3e	; 62
     b4a:	62 97       	sbiw	r28, 0x12	; 18
     b4c:	0f b6       	in	r0, 0x3f	; 63
     b4e:	f8 94       	cli
     b50:	de bf       	out	0x3e, r29	; 62
     b52:	0f be       	out	0x3f, r0	; 63
     b54:	cd bf       	out	0x3d, r28	; 61
	setUp();
     b56:	0e 94 a6 02 	call	0x54c	; 0x54c <setUp>
	DDRC=0xff;
     b5a:	8f ef       	ldi	r24, 0xFF	; 255
     b5c:	84 bb       	out	0x14, r24	; 20
	//USART_WRITE_STRING("Starting : ");
	
	unsigned long Buffer=0;
     b5e:	19 82       	std	Y+1, r1	; 0x01
     b60:	1a 82       	std	Y+2, r1	; 0x02
     b62:	1b 82       	std	Y+3, r1	; 0x03
     b64:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t IrCmd=0;
     b66:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t IrAddress=0;
     b68:	1e 82       	std	Y+6, r1	; 0x06
	uint8_t NewIrCmdFlag=0;
     b6a:	1f 82       	std	Y+7, r1	; 0x07
	uint8_t ReceivedPassword[10]={0};
     b6c:	fe 01       	movw	r30, r28
     b6e:	38 96       	adiw	r30, 0x08	; 8
     b70:	8a e0       	ldi	r24, 0x0A	; 10
     b72:	df 01       	movw	r26, r30
     b74:	1d 92       	st	X+, r1
     b76:	8a 95       	dec	r24
     b78:	e9 f7       	brne	.-6      	; 0xb74 <main+0x32>
	uint8_t ReceivedPasswordFlag=AWAITINGPASSWORD;	
     b7a:	88 e0       	ldi	r24, 0x08	; 8
     b7c:	8a 8b       	std	Y+18, r24	; 0x12
	LcdUpdate(&LcdUpdateFlag);
     b7e:	8b e1       	ldi	r24, 0x1B	; 27
     b80:	91 e0       	ldi	r25, 0x01	; 1
     b82:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LcdUpdate>
    {
		
		if (NewBitTimeFlag)
		{
			NewBitTimeFlag=0;
			getCode(&NewBitTime,&Buffer,&IrAddress,&IrCmd,&NewIrCmdFlag);
     b86:	0f 2e       	mov	r0, r31
     b88:	f6 e2       	ldi	r31, 0x26	; 38
     b8a:	ef 2e       	mov	r14, r31
     b8c:	f1 e0       	ldi	r31, 0x01	; 1
     b8e:	ff 2e       	mov	r15, r31
     b90:	f0 2d       	mov	r31, r0
			if (NewIrCmdFlag==1)
			{
				NewIrCmdFlag=0;
				IDLETIMECOUNTERFLAG=1;
     b92:	bb 24       	eor	r11, r11
     b94:	b3 94       	inc	r11
				}
				
				else if (SysStatus==UNLOCKED)
				{
					
					ExecuteIrCmd(&IrCmd,&LcdUpdateFlag);
     b96:	0f 2e       	mov	r0, r31
     b98:	fb e1       	ldi	r31, 0x1B	; 27
     b9a:	cf 2e       	mov	r12, r31
     b9c:	f1 e0       	ldi	r31, 0x01	; 1
     b9e:	df 2e       	mov	r13, r31
     ba0:	f0 2d       	mov	r31, r0
				IDLETIMECOUNTER=0;
				if (SysStatus==LOCKED)
				{
					if (IrCmd==POWER)
					{
						SysStatus=READY;
     ba2:	0f 2e       	mov	r0, r31
     ba4:	f3 e0       	ldi	r31, 0x03	; 3
     ba6:	af 2e       	mov	r10, r31
     ba8:	f0 2d       	mov	r31, r0
	
	
    while(1)
    {
		
		if (NewBitTimeFlag)
     baa:	80 91 25 01 	lds	r24, 0x0125
     bae:	88 23       	and	r24, r24
     bb0:	09 f4       	brne	.+2      	; 0xbb4 <main+0x72>
     bb2:	63 c0       	rjmp	.+198    	; 0xc7a <main+0x138>
		{
			NewBitTimeFlag=0;
     bb4:	10 92 25 01 	sts	0x0125, r1
			getCode(&NewBitTime,&Buffer,&IrAddress,&IrCmd,&NewIrCmdFlag);
     bb8:	c7 01       	movw	r24, r14
     bba:	be 01       	movw	r22, r28
     bbc:	6f 5f       	subi	r22, 0xFF	; 255
     bbe:	7f 4f       	sbci	r23, 0xFF	; 255
     bc0:	ae 01       	movw	r20, r28
     bc2:	4a 5f       	subi	r20, 0xFA	; 250
     bc4:	5f 4f       	sbci	r21, 0xFF	; 255
     bc6:	9e 01       	movw	r18, r28
     bc8:	2b 5f       	subi	r18, 0xFB	; 251
     bca:	3f 4f       	sbci	r19, 0xFF	; 255
     bcc:	8e 01       	movw	r16, r28
     bce:	09 5f       	subi	r16, 0xF9	; 249
     bd0:	1f 4f       	sbci	r17, 0xFF	; 255
     bd2:	0e 94 c4 02 	call	0x588	; 0x588 <getCode>
			if (NewIrCmdFlag==1)
     bd6:	8f 81       	ldd	r24, Y+7	; 0x07
     bd8:	81 30       	cpi	r24, 0x01	; 1
     bda:	09 f0       	breq	.+2      	; 0xbde <main+0x9c>
     bdc:	4e c0       	rjmp	.+156    	; 0xc7a <main+0x138>
			{
				NewIrCmdFlag=0;
     bde:	1f 82       	std	Y+7, r1	; 0x07
				IDLETIMECOUNTERFLAG=1;
     be0:	b0 92 32 01 	sts	0x0132, r11
				IDLETIMECOUNTER=0;
     be4:	10 92 37 01 	sts	0x0137, r1
				if (SysStatus==LOCKED)
     be8:	80 91 1d 01 	lds	r24, 0x011D
     bec:	81 30       	cpi	r24, 0x01	; 1
     bee:	49 f4       	brne	.+18     	; 0xc02 <main+0xc0>
				{
					if (IrCmd==POWER)
     bf0:	8d 81       	ldd	r24, Y+5	; 0x05
     bf2:	8f 3f       	cpi	r24, 0xFF	; 255
     bf4:	09 f0       	breq	.+2      	; 0xbf8 <main+0xb6>
     bf6:	40 c0       	rjmp	.+128    	; 0xc78 <main+0x136>
					{
						SysStatus=READY;
     bf8:	a0 92 1d 01 	sts	0x011D, r10
						LcdUpdateFlag=READY;
     bfc:	a0 92 1b 01 	sts	0x011B, r10
     c00:	3b c0       	rjmp	.+118    	; 0xc78 <main+0x136>
					}
				} 
				else if (SysStatus==READY)
     c02:	80 91 1d 01 	lds	r24, 0x011D
     c06:	83 30       	cpi	r24, 0x03	; 3
     c08:	71 f5       	brne	.+92     	; 0xc66 <main+0x124>
				{
					GetPassword(&IrAddress,&IrCmd,&ReceivedPasswordFlag,ReceivedPassword,&LcdUpdateFlag);
     c0a:	ce 01       	movw	r24, r28
     c0c:	06 96       	adiw	r24, 0x06	; 6
     c0e:	be 01       	movw	r22, r28
     c10:	6b 5f       	subi	r22, 0xFB	; 251
     c12:	7f 4f       	sbci	r23, 0xFF	; 255
     c14:	ae 01       	movw	r20, r28
     c16:	4e 5e       	subi	r20, 0xEE	; 238
     c18:	5f 4f       	sbci	r21, 0xFF	; 255
     c1a:	9e 01       	movw	r18, r28
     c1c:	28 5f       	subi	r18, 0xF8	; 248
     c1e:	3f 4f       	sbci	r19, 0xFF	; 255
     c20:	86 01       	movw	r16, r12
     c22:	0e 94 8c 03 	call	0x718	; 0x718 <GetPassword>
					
					
					if (ReceivedPasswordFlag==NEWPASSWORD)
     c26:	8a 89       	ldd	r24, Y+18	; 0x12
     c28:	87 30       	cpi	r24, 0x07	; 7
     c2a:	31 f5       	brne	.+76     	; 0xc78 <main+0x136>
					{
						CheckPassword(&ReceivedPassword,&ReceivedPasswordFlag,&LcdUpdateFlag);
     c2c:	ce 01       	movw	r24, r28
     c2e:	08 96       	adiw	r24, 0x08	; 8
     c30:	be 01       	movw	r22, r28
     c32:	6e 5e       	subi	r22, 0xEE	; 238
     c34:	7f 4f       	sbci	r23, 0xFF	; 255
     c36:	a6 01       	movw	r20, r12
     c38:	0e 94 74 04 	call	0x8e8	; 0x8e8 <CheckPassword>
						if (ReceivedPasswordFlag==CORRECT) 
     c3c:	8a 89       	ldd	r24, Y+18	; 0x12
     c3e:	84 30       	cpi	r24, 0x04	; 4
     c40:	21 f4       	brne	.+8      	; 0xc4a <main+0x108>
						{
							SysStatus=UNLOCKED;
     c42:	b2 e0       	ldi	r27, 0x02	; 2
     c44:	b0 93 1d 01 	sts	0x011D, r27
     c48:	17 c0       	rjmp	.+46     	; 0xc78 <main+0x136>
						}
						else if (ReceivedPasswordFlag==INCORRECT)
     c4a:	85 30       	cpi	r24, 0x05	; 5
     c4c:	29 f4       	brne	.+10     	; 0xc58 <main+0x116>
						{
							USART_WRITE_STRING("incorrect");
     c4e:	8b e0       	ldi	r24, 0x0B	; 11
     c50:	91 e0       	ldi	r25, 0x01	; 1
     c52:	0e 94 56 00 	call	0xac	; 0xac <USART_WRITE_STRING>
     c56:	10 c0       	rjmp	.+32     	; 0xc78 <main+0x136>
							// error message
						}
						else if (ReceivedPasswordFlag==EMPTYPASSWORD)
     c58:	86 30       	cpi	r24, 0x06	; 6
     c5a:	71 f4       	brne	.+28     	; 0xc78 <main+0x136>
						{
							USART_WRITE_STRING("empty");
     c5c:	85 e1       	ldi	r24, 0x15	; 21
     c5e:	91 e0       	ldi	r25, 0x01	; 1
     c60:	0e 94 56 00 	call	0xac	; 0xac <USART_WRITE_STRING>
     c64:	09 c0       	rjmp	.+18     	; 0xc78 <main+0x136>
					}
					
				
				}
				
				else if (SysStatus==UNLOCKED)
     c66:	80 91 1d 01 	lds	r24, 0x011D
     c6a:	82 30       	cpi	r24, 0x02	; 2
     c6c:	29 f4       	brne	.+10     	; 0xc78 <main+0x136>
				{
					
					ExecuteIrCmd(&IrCmd,&LcdUpdateFlag);
     c6e:	ce 01       	movw	r24, r28
     c70:	05 96       	adiw	r24, 0x05	; 5
     c72:	b6 01       	movw	r22, r12
     c74:	0e 94 a6 04 	call	0x94c	; 0x94c <ExecuteIrCmd>
					
				}
				
				
				IrCmd=0;
     c78:	1d 82       	std	Y+5, r1	; 0x05
			}
			
		}
		
		if (LcdUpdateFlag)
     c7a:	80 91 1b 01 	lds	r24, 0x011B
     c7e:	88 23       	and	r24, r24
     c80:	09 f4       	brne	.+2      	; 0xc84 <main+0x142>
     c82:	93 cf       	rjmp	.-218    	; 0xbaa <main+0x68>
		{
			LcdUpdate(&LcdUpdateFlag);
     c84:	c6 01       	movw	r24, r12
     c86:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LcdUpdate>
     c8a:	8f cf       	rjmp	.-226    	; 0xbaa <main+0x68>

00000c8c <__subsf3>:
     c8c:	50 58       	subi	r21, 0x80	; 128

00000c8e <__addsf3>:
     c8e:	bb 27       	eor	r27, r27
     c90:	aa 27       	eor	r26, r26
     c92:	0e d0       	rcall	.+28     	; 0xcb0 <__addsf3x>
     c94:	4d c1       	rjmp	.+666    	; 0xf30 <__fp_round>
     c96:	3e d1       	rcall	.+636    	; 0xf14 <__fp_pscA>
     c98:	30 f0       	brcs	.+12     	; 0xca6 <__addsf3+0x18>
     c9a:	43 d1       	rcall	.+646    	; 0xf22 <__fp_pscB>
     c9c:	20 f0       	brcs	.+8      	; 0xca6 <__addsf3+0x18>
     c9e:	31 f4       	brne	.+12     	; 0xcac <__addsf3+0x1e>
     ca0:	9f 3f       	cpi	r25, 0xFF	; 255
     ca2:	11 f4       	brne	.+4      	; 0xca8 <__addsf3+0x1a>
     ca4:	1e f4       	brtc	.+6      	; 0xcac <__addsf3+0x1e>
     ca6:	33 c1       	rjmp	.+614    	; 0xf0e <__fp_nan>
     ca8:	0e f4       	brtc	.+2      	; 0xcac <__addsf3+0x1e>
     caa:	e0 95       	com	r30
     cac:	e7 fb       	bst	r30, 7
     cae:	29 c1       	rjmp	.+594    	; 0xf02 <__fp_inf>

00000cb0 <__addsf3x>:
     cb0:	e9 2f       	mov	r30, r25
     cb2:	4f d1       	rcall	.+670    	; 0xf52 <__fp_split3>
     cb4:	80 f3       	brcs	.-32     	; 0xc96 <__addsf3+0x8>
     cb6:	ba 17       	cp	r27, r26
     cb8:	62 07       	cpc	r22, r18
     cba:	73 07       	cpc	r23, r19
     cbc:	84 07       	cpc	r24, r20
     cbe:	95 07       	cpc	r25, r21
     cc0:	18 f0       	brcs	.+6      	; 0xcc8 <__addsf3x+0x18>
     cc2:	71 f4       	brne	.+28     	; 0xce0 <__addsf3x+0x30>
     cc4:	9e f5       	brtc	.+102    	; 0xd2c <__addsf3x+0x7c>
     cc6:	67 c1       	rjmp	.+718    	; 0xf96 <__fp_zero>
     cc8:	0e f4       	brtc	.+2      	; 0xccc <__addsf3x+0x1c>
     cca:	e0 95       	com	r30
     ccc:	0b 2e       	mov	r0, r27
     cce:	ba 2f       	mov	r27, r26
     cd0:	a0 2d       	mov	r26, r0
     cd2:	0b 01       	movw	r0, r22
     cd4:	b9 01       	movw	r22, r18
     cd6:	90 01       	movw	r18, r0
     cd8:	0c 01       	movw	r0, r24
     cda:	ca 01       	movw	r24, r20
     cdc:	a0 01       	movw	r20, r0
     cde:	11 24       	eor	r1, r1
     ce0:	ff 27       	eor	r31, r31
     ce2:	59 1b       	sub	r21, r25
     ce4:	99 f0       	breq	.+38     	; 0xd0c <__addsf3x+0x5c>
     ce6:	59 3f       	cpi	r21, 0xF9	; 249
     ce8:	50 f4       	brcc	.+20     	; 0xcfe <__addsf3x+0x4e>
     cea:	50 3e       	cpi	r21, 0xE0	; 224
     cec:	68 f1       	brcs	.+90     	; 0xd48 <__addsf3x+0x98>
     cee:	1a 16       	cp	r1, r26
     cf0:	f0 40       	sbci	r31, 0x00	; 0
     cf2:	a2 2f       	mov	r26, r18
     cf4:	23 2f       	mov	r18, r19
     cf6:	34 2f       	mov	r19, r20
     cf8:	44 27       	eor	r20, r20
     cfa:	58 5f       	subi	r21, 0xF8	; 248
     cfc:	f3 cf       	rjmp	.-26     	; 0xce4 <__addsf3x+0x34>
     cfe:	46 95       	lsr	r20
     d00:	37 95       	ror	r19
     d02:	27 95       	ror	r18
     d04:	a7 95       	ror	r26
     d06:	f0 40       	sbci	r31, 0x00	; 0
     d08:	53 95       	inc	r21
     d0a:	c9 f7       	brne	.-14     	; 0xcfe <__addsf3x+0x4e>
     d0c:	7e f4       	brtc	.+30     	; 0xd2c <__addsf3x+0x7c>
     d0e:	1f 16       	cp	r1, r31
     d10:	ba 0b       	sbc	r27, r26
     d12:	62 0b       	sbc	r22, r18
     d14:	73 0b       	sbc	r23, r19
     d16:	84 0b       	sbc	r24, r20
     d18:	ba f0       	brmi	.+46     	; 0xd48 <__addsf3x+0x98>
     d1a:	91 50       	subi	r25, 0x01	; 1
     d1c:	a1 f0       	breq	.+40     	; 0xd46 <__addsf3x+0x96>
     d1e:	ff 0f       	add	r31, r31
     d20:	bb 1f       	adc	r27, r27
     d22:	66 1f       	adc	r22, r22
     d24:	77 1f       	adc	r23, r23
     d26:	88 1f       	adc	r24, r24
     d28:	c2 f7       	brpl	.-16     	; 0xd1a <__addsf3x+0x6a>
     d2a:	0e c0       	rjmp	.+28     	; 0xd48 <__addsf3x+0x98>
     d2c:	ba 0f       	add	r27, r26
     d2e:	62 1f       	adc	r22, r18
     d30:	73 1f       	adc	r23, r19
     d32:	84 1f       	adc	r24, r20
     d34:	48 f4       	brcc	.+18     	; 0xd48 <__addsf3x+0x98>
     d36:	87 95       	ror	r24
     d38:	77 95       	ror	r23
     d3a:	67 95       	ror	r22
     d3c:	b7 95       	ror	r27
     d3e:	f7 95       	ror	r31
     d40:	9e 3f       	cpi	r25, 0xFE	; 254
     d42:	08 f0       	brcs	.+2      	; 0xd46 <__addsf3x+0x96>
     d44:	b3 cf       	rjmp	.-154    	; 0xcac <__addsf3+0x1e>
     d46:	93 95       	inc	r25
     d48:	88 0f       	add	r24, r24
     d4a:	08 f0       	brcs	.+2      	; 0xd4e <__addsf3x+0x9e>
     d4c:	99 27       	eor	r25, r25
     d4e:	ee 0f       	add	r30, r30
     d50:	97 95       	ror	r25
     d52:	87 95       	ror	r24
     d54:	08 95       	ret

00000d56 <__divsf3>:
     d56:	0c d0       	rcall	.+24     	; 0xd70 <__divsf3x>
     d58:	eb c0       	rjmp	.+470    	; 0xf30 <__fp_round>
     d5a:	e3 d0       	rcall	.+454    	; 0xf22 <__fp_pscB>
     d5c:	40 f0       	brcs	.+16     	; 0xd6e <__divsf3+0x18>
     d5e:	da d0       	rcall	.+436    	; 0xf14 <__fp_pscA>
     d60:	30 f0       	brcs	.+12     	; 0xd6e <__divsf3+0x18>
     d62:	21 f4       	brne	.+8      	; 0xd6c <__divsf3+0x16>
     d64:	5f 3f       	cpi	r21, 0xFF	; 255
     d66:	19 f0       	breq	.+6      	; 0xd6e <__divsf3+0x18>
     d68:	cc c0       	rjmp	.+408    	; 0xf02 <__fp_inf>
     d6a:	51 11       	cpse	r21, r1
     d6c:	15 c1       	rjmp	.+554    	; 0xf98 <__fp_szero>
     d6e:	cf c0       	rjmp	.+414    	; 0xf0e <__fp_nan>

00000d70 <__divsf3x>:
     d70:	f0 d0       	rcall	.+480    	; 0xf52 <__fp_split3>
     d72:	98 f3       	brcs	.-26     	; 0xd5a <__divsf3+0x4>

00000d74 <__divsf3_pse>:
     d74:	99 23       	and	r25, r25
     d76:	c9 f3       	breq	.-14     	; 0xd6a <__divsf3+0x14>
     d78:	55 23       	and	r21, r21
     d7a:	b1 f3       	breq	.-20     	; 0xd68 <__divsf3+0x12>
     d7c:	95 1b       	sub	r25, r21
     d7e:	55 0b       	sbc	r21, r21
     d80:	bb 27       	eor	r27, r27
     d82:	aa 27       	eor	r26, r26
     d84:	62 17       	cp	r22, r18
     d86:	73 07       	cpc	r23, r19
     d88:	84 07       	cpc	r24, r20
     d8a:	38 f0       	brcs	.+14     	; 0xd9a <__divsf3_pse+0x26>
     d8c:	9f 5f       	subi	r25, 0xFF	; 255
     d8e:	5f 4f       	sbci	r21, 0xFF	; 255
     d90:	22 0f       	add	r18, r18
     d92:	33 1f       	adc	r19, r19
     d94:	44 1f       	adc	r20, r20
     d96:	aa 1f       	adc	r26, r26
     d98:	a9 f3       	breq	.-22     	; 0xd84 <__divsf3_pse+0x10>
     d9a:	33 d0       	rcall	.+102    	; 0xe02 <__divsf3_pse+0x8e>
     d9c:	0e 2e       	mov	r0, r30
     d9e:	3a f0       	brmi	.+14     	; 0xdae <__divsf3_pse+0x3a>
     da0:	e0 e8       	ldi	r30, 0x80	; 128
     da2:	30 d0       	rcall	.+96     	; 0xe04 <__divsf3_pse+0x90>
     da4:	91 50       	subi	r25, 0x01	; 1
     da6:	50 40       	sbci	r21, 0x00	; 0
     da8:	e6 95       	lsr	r30
     daa:	00 1c       	adc	r0, r0
     dac:	ca f7       	brpl	.-14     	; 0xda0 <__divsf3_pse+0x2c>
     dae:	29 d0       	rcall	.+82     	; 0xe02 <__divsf3_pse+0x8e>
     db0:	fe 2f       	mov	r31, r30
     db2:	27 d0       	rcall	.+78     	; 0xe02 <__divsf3_pse+0x8e>
     db4:	66 0f       	add	r22, r22
     db6:	77 1f       	adc	r23, r23
     db8:	88 1f       	adc	r24, r24
     dba:	bb 1f       	adc	r27, r27
     dbc:	26 17       	cp	r18, r22
     dbe:	37 07       	cpc	r19, r23
     dc0:	48 07       	cpc	r20, r24
     dc2:	ab 07       	cpc	r26, r27
     dc4:	b0 e8       	ldi	r27, 0x80	; 128
     dc6:	09 f0       	breq	.+2      	; 0xdca <__divsf3_pse+0x56>
     dc8:	bb 0b       	sbc	r27, r27
     dca:	80 2d       	mov	r24, r0
     dcc:	bf 01       	movw	r22, r30
     dce:	ff 27       	eor	r31, r31
     dd0:	93 58       	subi	r25, 0x83	; 131
     dd2:	5f 4f       	sbci	r21, 0xFF	; 255
     dd4:	2a f0       	brmi	.+10     	; 0xde0 <__divsf3_pse+0x6c>
     dd6:	9e 3f       	cpi	r25, 0xFE	; 254
     dd8:	51 05       	cpc	r21, r1
     dda:	68 f0       	brcs	.+26     	; 0xdf6 <__divsf3_pse+0x82>
     ddc:	92 c0       	rjmp	.+292    	; 0xf02 <__fp_inf>
     dde:	dc c0       	rjmp	.+440    	; 0xf98 <__fp_szero>
     de0:	5f 3f       	cpi	r21, 0xFF	; 255
     de2:	ec f3       	brlt	.-6      	; 0xdde <__divsf3_pse+0x6a>
     de4:	98 3e       	cpi	r25, 0xE8	; 232
     de6:	dc f3       	brlt	.-10     	; 0xdde <__divsf3_pse+0x6a>
     de8:	86 95       	lsr	r24
     dea:	77 95       	ror	r23
     dec:	67 95       	ror	r22
     dee:	b7 95       	ror	r27
     df0:	f7 95       	ror	r31
     df2:	9f 5f       	subi	r25, 0xFF	; 255
     df4:	c9 f7       	brne	.-14     	; 0xde8 <__divsf3_pse+0x74>
     df6:	88 0f       	add	r24, r24
     df8:	91 1d       	adc	r25, r1
     dfa:	96 95       	lsr	r25
     dfc:	87 95       	ror	r24
     dfe:	97 f9       	bld	r25, 7
     e00:	08 95       	ret
     e02:	e1 e0       	ldi	r30, 0x01	; 1
     e04:	66 0f       	add	r22, r22
     e06:	77 1f       	adc	r23, r23
     e08:	88 1f       	adc	r24, r24
     e0a:	bb 1f       	adc	r27, r27
     e0c:	62 17       	cp	r22, r18
     e0e:	73 07       	cpc	r23, r19
     e10:	84 07       	cpc	r24, r20
     e12:	ba 07       	cpc	r27, r26
     e14:	20 f0       	brcs	.+8      	; 0xe1e <__divsf3_pse+0xaa>
     e16:	62 1b       	sub	r22, r18
     e18:	73 0b       	sbc	r23, r19
     e1a:	84 0b       	sbc	r24, r20
     e1c:	ba 0b       	sbc	r27, r26
     e1e:	ee 1f       	adc	r30, r30
     e20:	88 f7       	brcc	.-30     	; 0xe04 <__divsf3_pse+0x90>
     e22:	e0 95       	com	r30
     e24:	08 95       	ret

00000e26 <__fixsfsi>:
     e26:	04 d0       	rcall	.+8      	; 0xe30 <__fixunssfsi>
     e28:	68 94       	set
     e2a:	b1 11       	cpse	r27, r1
     e2c:	b5 c0       	rjmp	.+362    	; 0xf98 <__fp_szero>
     e2e:	08 95       	ret

00000e30 <__fixunssfsi>:
     e30:	98 d0       	rcall	.+304    	; 0xf62 <__fp_splitA>
     e32:	88 f0       	brcs	.+34     	; 0xe56 <__fixunssfsi+0x26>
     e34:	9f 57       	subi	r25, 0x7F	; 127
     e36:	90 f0       	brcs	.+36     	; 0xe5c <__fixunssfsi+0x2c>
     e38:	b9 2f       	mov	r27, r25
     e3a:	99 27       	eor	r25, r25
     e3c:	b7 51       	subi	r27, 0x17	; 23
     e3e:	a0 f0       	brcs	.+40     	; 0xe68 <__fixunssfsi+0x38>
     e40:	d1 f0       	breq	.+52     	; 0xe76 <__fixunssfsi+0x46>
     e42:	66 0f       	add	r22, r22
     e44:	77 1f       	adc	r23, r23
     e46:	88 1f       	adc	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	1a f0       	brmi	.+6      	; 0xe52 <__fixunssfsi+0x22>
     e4c:	ba 95       	dec	r27
     e4e:	c9 f7       	brne	.-14     	; 0xe42 <__fixunssfsi+0x12>
     e50:	12 c0       	rjmp	.+36     	; 0xe76 <__fixunssfsi+0x46>
     e52:	b1 30       	cpi	r27, 0x01	; 1
     e54:	81 f0       	breq	.+32     	; 0xe76 <__fixunssfsi+0x46>
     e56:	9f d0       	rcall	.+318    	; 0xf96 <__fp_zero>
     e58:	b1 e0       	ldi	r27, 0x01	; 1
     e5a:	08 95       	ret
     e5c:	9c c0       	rjmp	.+312    	; 0xf96 <__fp_zero>
     e5e:	67 2f       	mov	r22, r23
     e60:	78 2f       	mov	r23, r24
     e62:	88 27       	eor	r24, r24
     e64:	b8 5f       	subi	r27, 0xF8	; 248
     e66:	39 f0       	breq	.+14     	; 0xe76 <__fixunssfsi+0x46>
     e68:	b9 3f       	cpi	r27, 0xF9	; 249
     e6a:	cc f3       	brlt	.-14     	; 0xe5e <__fixunssfsi+0x2e>
     e6c:	86 95       	lsr	r24
     e6e:	77 95       	ror	r23
     e70:	67 95       	ror	r22
     e72:	b3 95       	inc	r27
     e74:	d9 f7       	brne	.-10     	; 0xe6c <__fixunssfsi+0x3c>
     e76:	3e f4       	brtc	.+14     	; 0xe86 <__fixunssfsi+0x56>
     e78:	90 95       	com	r25
     e7a:	80 95       	com	r24
     e7c:	70 95       	com	r23
     e7e:	61 95       	neg	r22
     e80:	7f 4f       	sbci	r23, 0xFF	; 255
     e82:	8f 4f       	sbci	r24, 0xFF	; 255
     e84:	9f 4f       	sbci	r25, 0xFF	; 255
     e86:	08 95       	ret

00000e88 <__floatunsisf>:
     e88:	e8 94       	clt
     e8a:	09 c0       	rjmp	.+18     	; 0xe9e <__floatsisf+0x12>

00000e8c <__floatsisf>:
     e8c:	97 fb       	bst	r25, 7
     e8e:	3e f4       	brtc	.+14     	; 0xe9e <__floatsisf+0x12>
     e90:	90 95       	com	r25
     e92:	80 95       	com	r24
     e94:	70 95       	com	r23
     e96:	61 95       	neg	r22
     e98:	7f 4f       	sbci	r23, 0xFF	; 255
     e9a:	8f 4f       	sbci	r24, 0xFF	; 255
     e9c:	9f 4f       	sbci	r25, 0xFF	; 255
     e9e:	99 23       	and	r25, r25
     ea0:	a9 f0       	breq	.+42     	; 0xecc <__floatsisf+0x40>
     ea2:	f9 2f       	mov	r31, r25
     ea4:	96 e9       	ldi	r25, 0x96	; 150
     ea6:	bb 27       	eor	r27, r27
     ea8:	93 95       	inc	r25
     eaa:	f6 95       	lsr	r31
     eac:	87 95       	ror	r24
     eae:	77 95       	ror	r23
     eb0:	67 95       	ror	r22
     eb2:	b7 95       	ror	r27
     eb4:	f1 11       	cpse	r31, r1
     eb6:	f8 cf       	rjmp	.-16     	; 0xea8 <__floatsisf+0x1c>
     eb8:	fa f4       	brpl	.+62     	; 0xef8 <__floatsisf+0x6c>
     eba:	bb 0f       	add	r27, r27
     ebc:	11 f4       	brne	.+4      	; 0xec2 <__floatsisf+0x36>
     ebe:	60 ff       	sbrs	r22, 0
     ec0:	1b c0       	rjmp	.+54     	; 0xef8 <__floatsisf+0x6c>
     ec2:	6f 5f       	subi	r22, 0xFF	; 255
     ec4:	7f 4f       	sbci	r23, 0xFF	; 255
     ec6:	8f 4f       	sbci	r24, 0xFF	; 255
     ec8:	9f 4f       	sbci	r25, 0xFF	; 255
     eca:	16 c0       	rjmp	.+44     	; 0xef8 <__floatsisf+0x6c>
     ecc:	88 23       	and	r24, r24
     ece:	11 f0       	breq	.+4      	; 0xed4 <__floatsisf+0x48>
     ed0:	96 e9       	ldi	r25, 0x96	; 150
     ed2:	11 c0       	rjmp	.+34     	; 0xef6 <__floatsisf+0x6a>
     ed4:	77 23       	and	r23, r23
     ed6:	21 f0       	breq	.+8      	; 0xee0 <__floatsisf+0x54>
     ed8:	9e e8       	ldi	r25, 0x8E	; 142
     eda:	87 2f       	mov	r24, r23
     edc:	76 2f       	mov	r23, r22
     ede:	05 c0       	rjmp	.+10     	; 0xeea <__floatsisf+0x5e>
     ee0:	66 23       	and	r22, r22
     ee2:	71 f0       	breq	.+28     	; 0xf00 <__floatsisf+0x74>
     ee4:	96 e8       	ldi	r25, 0x86	; 134
     ee6:	86 2f       	mov	r24, r22
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	60 e0       	ldi	r22, 0x00	; 0
     eec:	2a f0       	brmi	.+10     	; 0xef8 <__floatsisf+0x6c>
     eee:	9a 95       	dec	r25
     ef0:	66 0f       	add	r22, r22
     ef2:	77 1f       	adc	r23, r23
     ef4:	88 1f       	adc	r24, r24
     ef6:	da f7       	brpl	.-10     	; 0xeee <__floatsisf+0x62>
     ef8:	88 0f       	add	r24, r24
     efa:	96 95       	lsr	r25
     efc:	87 95       	ror	r24
     efe:	97 f9       	bld	r25, 7
     f00:	08 95       	ret

00000f02 <__fp_inf>:
     f02:	97 f9       	bld	r25, 7
     f04:	9f 67       	ori	r25, 0x7F	; 127
     f06:	80 e8       	ldi	r24, 0x80	; 128
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	60 e0       	ldi	r22, 0x00	; 0
     f0c:	08 95       	ret

00000f0e <__fp_nan>:
     f0e:	9f ef       	ldi	r25, 0xFF	; 255
     f10:	80 ec       	ldi	r24, 0xC0	; 192
     f12:	08 95       	ret

00000f14 <__fp_pscA>:
     f14:	00 24       	eor	r0, r0
     f16:	0a 94       	dec	r0
     f18:	16 16       	cp	r1, r22
     f1a:	17 06       	cpc	r1, r23
     f1c:	18 06       	cpc	r1, r24
     f1e:	09 06       	cpc	r0, r25
     f20:	08 95       	ret

00000f22 <__fp_pscB>:
     f22:	00 24       	eor	r0, r0
     f24:	0a 94       	dec	r0
     f26:	12 16       	cp	r1, r18
     f28:	13 06       	cpc	r1, r19
     f2a:	14 06       	cpc	r1, r20
     f2c:	05 06       	cpc	r0, r21
     f2e:	08 95       	ret

00000f30 <__fp_round>:
     f30:	09 2e       	mov	r0, r25
     f32:	03 94       	inc	r0
     f34:	00 0c       	add	r0, r0
     f36:	11 f4       	brne	.+4      	; 0xf3c <__fp_round+0xc>
     f38:	88 23       	and	r24, r24
     f3a:	52 f0       	brmi	.+20     	; 0xf50 <__fp_round+0x20>
     f3c:	bb 0f       	add	r27, r27
     f3e:	40 f4       	brcc	.+16     	; 0xf50 <__fp_round+0x20>
     f40:	bf 2b       	or	r27, r31
     f42:	11 f4       	brne	.+4      	; 0xf48 <__fp_round+0x18>
     f44:	60 ff       	sbrs	r22, 0
     f46:	04 c0       	rjmp	.+8      	; 0xf50 <__fp_round+0x20>
     f48:	6f 5f       	subi	r22, 0xFF	; 255
     f4a:	7f 4f       	sbci	r23, 0xFF	; 255
     f4c:	8f 4f       	sbci	r24, 0xFF	; 255
     f4e:	9f 4f       	sbci	r25, 0xFF	; 255
     f50:	08 95       	ret

00000f52 <__fp_split3>:
     f52:	57 fd       	sbrc	r21, 7
     f54:	90 58       	subi	r25, 0x80	; 128
     f56:	44 0f       	add	r20, r20
     f58:	55 1f       	adc	r21, r21
     f5a:	59 f0       	breq	.+22     	; 0xf72 <__fp_splitA+0x10>
     f5c:	5f 3f       	cpi	r21, 0xFF	; 255
     f5e:	71 f0       	breq	.+28     	; 0xf7c <__fp_splitA+0x1a>
     f60:	47 95       	ror	r20

00000f62 <__fp_splitA>:
     f62:	88 0f       	add	r24, r24
     f64:	97 fb       	bst	r25, 7
     f66:	99 1f       	adc	r25, r25
     f68:	61 f0       	breq	.+24     	; 0xf82 <__fp_splitA+0x20>
     f6a:	9f 3f       	cpi	r25, 0xFF	; 255
     f6c:	79 f0       	breq	.+30     	; 0xf8c <__fp_splitA+0x2a>
     f6e:	87 95       	ror	r24
     f70:	08 95       	ret
     f72:	12 16       	cp	r1, r18
     f74:	13 06       	cpc	r1, r19
     f76:	14 06       	cpc	r1, r20
     f78:	55 1f       	adc	r21, r21
     f7a:	f2 cf       	rjmp	.-28     	; 0xf60 <__fp_split3+0xe>
     f7c:	46 95       	lsr	r20
     f7e:	f1 df       	rcall	.-30     	; 0xf62 <__fp_splitA>
     f80:	08 c0       	rjmp	.+16     	; 0xf92 <__fp_splitA+0x30>
     f82:	16 16       	cp	r1, r22
     f84:	17 06       	cpc	r1, r23
     f86:	18 06       	cpc	r1, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	f1 cf       	rjmp	.-30     	; 0xf6e <__fp_splitA+0xc>
     f8c:	86 95       	lsr	r24
     f8e:	71 05       	cpc	r23, r1
     f90:	61 05       	cpc	r22, r1
     f92:	08 94       	sec
     f94:	08 95       	ret

00000f96 <__fp_zero>:
     f96:	e8 94       	clt

00000f98 <__fp_szero>:
     f98:	bb 27       	eor	r27, r27
     f9a:	66 27       	eor	r22, r22
     f9c:	77 27       	eor	r23, r23
     f9e:	cb 01       	movw	r24, r22
     fa0:	97 f9       	bld	r25, 7
     fa2:	08 95       	ret

00000fa4 <__mulsf3>:
     fa4:	0b d0       	rcall	.+22     	; 0xfbc <__mulsf3x>
     fa6:	c4 cf       	rjmp	.-120    	; 0xf30 <__fp_round>
     fa8:	b5 df       	rcall	.-150    	; 0xf14 <__fp_pscA>
     faa:	28 f0       	brcs	.+10     	; 0xfb6 <__mulsf3+0x12>
     fac:	ba df       	rcall	.-140    	; 0xf22 <__fp_pscB>
     fae:	18 f0       	brcs	.+6      	; 0xfb6 <__mulsf3+0x12>
     fb0:	95 23       	and	r25, r21
     fb2:	09 f0       	breq	.+2      	; 0xfb6 <__mulsf3+0x12>
     fb4:	a6 cf       	rjmp	.-180    	; 0xf02 <__fp_inf>
     fb6:	ab cf       	rjmp	.-170    	; 0xf0e <__fp_nan>
     fb8:	11 24       	eor	r1, r1
     fba:	ee cf       	rjmp	.-36     	; 0xf98 <__fp_szero>

00000fbc <__mulsf3x>:
     fbc:	ca df       	rcall	.-108    	; 0xf52 <__fp_split3>
     fbe:	a0 f3       	brcs	.-24     	; 0xfa8 <__mulsf3+0x4>

00000fc0 <__mulsf3_pse>:
     fc0:	95 9f       	mul	r25, r21
     fc2:	d1 f3       	breq	.-12     	; 0xfb8 <__mulsf3+0x14>
     fc4:	95 0f       	add	r25, r21
     fc6:	50 e0       	ldi	r21, 0x00	; 0
     fc8:	55 1f       	adc	r21, r21
     fca:	62 9f       	mul	r22, r18
     fcc:	f0 01       	movw	r30, r0
     fce:	72 9f       	mul	r23, r18
     fd0:	bb 27       	eor	r27, r27
     fd2:	f0 0d       	add	r31, r0
     fd4:	b1 1d       	adc	r27, r1
     fd6:	63 9f       	mul	r22, r19
     fd8:	aa 27       	eor	r26, r26
     fda:	f0 0d       	add	r31, r0
     fdc:	b1 1d       	adc	r27, r1
     fde:	aa 1f       	adc	r26, r26
     fe0:	64 9f       	mul	r22, r20
     fe2:	66 27       	eor	r22, r22
     fe4:	b0 0d       	add	r27, r0
     fe6:	a1 1d       	adc	r26, r1
     fe8:	66 1f       	adc	r22, r22
     fea:	82 9f       	mul	r24, r18
     fec:	22 27       	eor	r18, r18
     fee:	b0 0d       	add	r27, r0
     ff0:	a1 1d       	adc	r26, r1
     ff2:	62 1f       	adc	r22, r18
     ff4:	73 9f       	mul	r23, r19
     ff6:	b0 0d       	add	r27, r0
     ff8:	a1 1d       	adc	r26, r1
     ffa:	62 1f       	adc	r22, r18
     ffc:	83 9f       	mul	r24, r19
     ffe:	a0 0d       	add	r26, r0
    1000:	61 1d       	adc	r22, r1
    1002:	22 1f       	adc	r18, r18
    1004:	74 9f       	mul	r23, r20
    1006:	33 27       	eor	r19, r19
    1008:	a0 0d       	add	r26, r0
    100a:	61 1d       	adc	r22, r1
    100c:	23 1f       	adc	r18, r19
    100e:	84 9f       	mul	r24, r20
    1010:	60 0d       	add	r22, r0
    1012:	21 1d       	adc	r18, r1
    1014:	82 2f       	mov	r24, r18
    1016:	76 2f       	mov	r23, r22
    1018:	6a 2f       	mov	r22, r26
    101a:	11 24       	eor	r1, r1
    101c:	9f 57       	subi	r25, 0x7F	; 127
    101e:	50 40       	sbci	r21, 0x00	; 0
    1020:	8a f0       	brmi	.+34     	; 0x1044 <__mulsf3_pse+0x84>
    1022:	e1 f0       	breq	.+56     	; 0x105c <__mulsf3_pse+0x9c>
    1024:	88 23       	and	r24, r24
    1026:	4a f0       	brmi	.+18     	; 0x103a <__mulsf3_pse+0x7a>
    1028:	ee 0f       	add	r30, r30
    102a:	ff 1f       	adc	r31, r31
    102c:	bb 1f       	adc	r27, r27
    102e:	66 1f       	adc	r22, r22
    1030:	77 1f       	adc	r23, r23
    1032:	88 1f       	adc	r24, r24
    1034:	91 50       	subi	r25, 0x01	; 1
    1036:	50 40       	sbci	r21, 0x00	; 0
    1038:	a9 f7       	brne	.-22     	; 0x1024 <__mulsf3_pse+0x64>
    103a:	9e 3f       	cpi	r25, 0xFE	; 254
    103c:	51 05       	cpc	r21, r1
    103e:	70 f0       	brcs	.+28     	; 0x105c <__mulsf3_pse+0x9c>
    1040:	60 cf       	rjmp	.-320    	; 0xf02 <__fp_inf>
    1042:	aa cf       	rjmp	.-172    	; 0xf98 <__fp_szero>
    1044:	5f 3f       	cpi	r21, 0xFF	; 255
    1046:	ec f3       	brlt	.-6      	; 0x1042 <__mulsf3_pse+0x82>
    1048:	98 3e       	cpi	r25, 0xE8	; 232
    104a:	dc f3       	brlt	.-10     	; 0x1042 <__mulsf3_pse+0x82>
    104c:	86 95       	lsr	r24
    104e:	77 95       	ror	r23
    1050:	67 95       	ror	r22
    1052:	b7 95       	ror	r27
    1054:	f7 95       	ror	r31
    1056:	e7 95       	ror	r30
    1058:	9f 5f       	subi	r25, 0xFF	; 255
    105a:	c1 f7       	brne	.-16     	; 0x104c <__mulsf3_pse+0x8c>
    105c:	fe 2b       	or	r31, r30
    105e:	88 0f       	add	r24, r24
    1060:	91 1d       	adc	r25, r1
    1062:	96 95       	lsr	r25
    1064:	87 95       	ror	r24
    1066:	97 f9       	bld	r25, 7
    1068:	08 95       	ret

0000106a <__divmodsi4>:
    106a:	97 fb       	bst	r25, 7
    106c:	09 2e       	mov	r0, r25
    106e:	05 26       	eor	r0, r21
    1070:	0e d0       	rcall	.+28     	; 0x108e <__divmodsi4_neg1>
    1072:	57 fd       	sbrc	r21, 7
    1074:	04 d0       	rcall	.+8      	; 0x107e <__divmodsi4_neg2>
    1076:	14 d0       	rcall	.+40     	; 0x10a0 <__udivmodsi4>
    1078:	0a d0       	rcall	.+20     	; 0x108e <__divmodsi4_neg1>
    107a:	00 1c       	adc	r0, r0
    107c:	38 f4       	brcc	.+14     	; 0x108c <__divmodsi4_exit>

0000107e <__divmodsi4_neg2>:
    107e:	50 95       	com	r21
    1080:	40 95       	com	r20
    1082:	30 95       	com	r19
    1084:	21 95       	neg	r18
    1086:	3f 4f       	sbci	r19, 0xFF	; 255
    1088:	4f 4f       	sbci	r20, 0xFF	; 255
    108a:	5f 4f       	sbci	r21, 0xFF	; 255

0000108c <__divmodsi4_exit>:
    108c:	08 95       	ret

0000108e <__divmodsi4_neg1>:
    108e:	f6 f7       	brtc	.-4      	; 0x108c <__divmodsi4_exit>
    1090:	90 95       	com	r25
    1092:	80 95       	com	r24
    1094:	70 95       	com	r23
    1096:	61 95       	neg	r22
    1098:	7f 4f       	sbci	r23, 0xFF	; 255
    109a:	8f 4f       	sbci	r24, 0xFF	; 255
    109c:	9f 4f       	sbci	r25, 0xFF	; 255
    109e:	08 95       	ret

000010a0 <__udivmodsi4>:
    10a0:	a1 e2       	ldi	r26, 0x21	; 33
    10a2:	1a 2e       	mov	r1, r26
    10a4:	aa 1b       	sub	r26, r26
    10a6:	bb 1b       	sub	r27, r27
    10a8:	fd 01       	movw	r30, r26
    10aa:	0d c0       	rjmp	.+26     	; 0x10c6 <__udivmodsi4_ep>

000010ac <__udivmodsi4_loop>:
    10ac:	aa 1f       	adc	r26, r26
    10ae:	bb 1f       	adc	r27, r27
    10b0:	ee 1f       	adc	r30, r30
    10b2:	ff 1f       	adc	r31, r31
    10b4:	a2 17       	cp	r26, r18
    10b6:	b3 07       	cpc	r27, r19
    10b8:	e4 07       	cpc	r30, r20
    10ba:	f5 07       	cpc	r31, r21
    10bc:	20 f0       	brcs	.+8      	; 0x10c6 <__udivmodsi4_ep>
    10be:	a2 1b       	sub	r26, r18
    10c0:	b3 0b       	sbc	r27, r19
    10c2:	e4 0b       	sbc	r30, r20
    10c4:	f5 0b       	sbc	r31, r21

000010c6 <__udivmodsi4_ep>:
    10c6:	66 1f       	adc	r22, r22
    10c8:	77 1f       	adc	r23, r23
    10ca:	88 1f       	adc	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	1a 94       	dec	r1
    10d0:	69 f7       	brne	.-38     	; 0x10ac <__udivmodsi4_loop>
    10d2:	60 95       	com	r22
    10d4:	70 95       	com	r23
    10d6:	80 95       	com	r24
    10d8:	90 95       	com	r25
    10da:	9b 01       	movw	r18, r22
    10dc:	ac 01       	movw	r20, r24
    10de:	bd 01       	movw	r22, r26
    10e0:	cf 01       	movw	r24, r30
    10e2:	08 95       	ret

000010e4 <strcmp>:
    10e4:	fb 01       	movw	r30, r22
    10e6:	dc 01       	movw	r26, r24
    10e8:	8d 91       	ld	r24, X+
    10ea:	01 90       	ld	r0, Z+
    10ec:	80 19       	sub	r24, r0
    10ee:	01 10       	cpse	r0, r1
    10f0:	d9 f3       	breq	.-10     	; 0x10e8 <strcmp+0x4>
    10f2:	99 0b       	sbc	r25, r25
    10f4:	08 95       	ret

000010f6 <itoa>:
    10f6:	fb 01       	movw	r30, r22
    10f8:	9f 01       	movw	r18, r30
    10fa:	e8 94       	clt
    10fc:	42 30       	cpi	r20, 0x02	; 2
    10fe:	c4 f0       	brlt	.+48     	; 0x1130 <itoa+0x3a>
    1100:	45 32       	cpi	r20, 0x25	; 37
    1102:	b4 f4       	brge	.+44     	; 0x1130 <itoa+0x3a>
    1104:	4a 30       	cpi	r20, 0x0A	; 10
    1106:	29 f4       	brne	.+10     	; 0x1112 <itoa+0x1c>
    1108:	97 fb       	bst	r25, 7
    110a:	1e f4       	brtc	.+6      	; 0x1112 <itoa+0x1c>
    110c:	90 95       	com	r25
    110e:	81 95       	neg	r24
    1110:	9f 4f       	sbci	r25, 0xFF	; 255
    1112:	64 2f       	mov	r22, r20
    1114:	77 27       	eor	r23, r23
    1116:	0e 94 ac 08 	call	0x1158	; 0x1158 <__udivmodhi4>
    111a:	80 5d       	subi	r24, 0xD0	; 208
    111c:	8a 33       	cpi	r24, 0x3A	; 58
    111e:	0c f0       	brlt	.+2      	; 0x1122 <itoa+0x2c>
    1120:	89 5d       	subi	r24, 0xD9	; 217
    1122:	81 93       	st	Z+, r24
    1124:	cb 01       	movw	r24, r22
    1126:	00 97       	sbiw	r24, 0x00	; 0
    1128:	a1 f7       	brne	.-24     	; 0x1112 <itoa+0x1c>
    112a:	16 f4       	brtc	.+4      	; 0x1130 <itoa+0x3a>
    112c:	5d e2       	ldi	r21, 0x2D	; 45
    112e:	51 93       	st	Z+, r21
    1130:	10 82       	st	Z, r1
    1132:	c9 01       	movw	r24, r18
    1134:	0c 94 9c 08 	jmp	0x1138	; 0x1138 <strrev>

00001138 <strrev>:
    1138:	dc 01       	movw	r26, r24
    113a:	fc 01       	movw	r30, r24
    113c:	67 2f       	mov	r22, r23
    113e:	71 91       	ld	r23, Z+
    1140:	77 23       	and	r23, r23
    1142:	e1 f7       	brne	.-8      	; 0x113c <strrev+0x4>
    1144:	32 97       	sbiw	r30, 0x02	; 2
    1146:	04 c0       	rjmp	.+8      	; 0x1150 <strrev+0x18>
    1148:	7c 91       	ld	r23, X
    114a:	6d 93       	st	X+, r22
    114c:	70 83       	st	Z, r23
    114e:	62 91       	ld	r22, -Z
    1150:	ae 17       	cp	r26, r30
    1152:	bf 07       	cpc	r27, r31
    1154:	c8 f3       	brcs	.-14     	; 0x1148 <strrev+0x10>
    1156:	08 95       	ret

00001158 <__udivmodhi4>:
    1158:	aa 1b       	sub	r26, r26
    115a:	bb 1b       	sub	r27, r27
    115c:	51 e1       	ldi	r21, 0x11	; 17
    115e:	07 c0       	rjmp	.+14     	; 0x116e <__udivmodhi4_ep>

00001160 <__udivmodhi4_loop>:
    1160:	aa 1f       	adc	r26, r26
    1162:	bb 1f       	adc	r27, r27
    1164:	a6 17       	cp	r26, r22
    1166:	b7 07       	cpc	r27, r23
    1168:	10 f0       	brcs	.+4      	; 0x116e <__udivmodhi4_ep>
    116a:	a6 1b       	sub	r26, r22
    116c:	b7 0b       	sbc	r27, r23

0000116e <__udivmodhi4_ep>:
    116e:	88 1f       	adc	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	5a 95       	dec	r21
    1174:	a9 f7       	brne	.-22     	; 0x1160 <__udivmodhi4_loop>
    1176:	80 95       	com	r24
    1178:	90 95       	com	r25
    117a:	bc 01       	movw	r22, r24
    117c:	cd 01       	movw	r24, r26
    117e:	08 95       	ret

00001180 <_exit>:
    1180:	f8 94       	cli

00001182 <__stop_program>:
    1182:	ff cf       	rjmp	.-2      	; 0x1182 <__stop_program>


IrRemoteControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005e  00800060  00000b92  00000c26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  008000be  008000be  00000c84  2**0
                  ALLOC
  3 .stab         000021f0  00000000  00000000  00000c84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000070a  00000000  00000000  00002e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00003580  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000095d  00000000  00000000  00003640  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000235  00000000  00000000  00003f9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004c0  00000000  00000000  000041d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  00004694  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c1  00000000  00000000  00004890  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007da  00000000  00000000  00004b51  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 19 01 	jmp	0x232	; 0x232 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e9       	ldi	r30, 0x92	; 146
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3b       	cpi	r26, 0xBE	; 190
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae eb       	ldi	r26, 0xBE	; 190
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3d       	cpi	r26, 0xD2	; 210
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0a 03 	call	0x614	; 0x614 <main>
  8a:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <USART_INIT>:

////////////////////////////////////////////////////////////////////////

void USART_INIT(unsigned char BAUD)
{
	USART_CONTROL_STATUS_REGISTER_B |=(1<<USART_TRANSMITTER_ENABLE)|(1<<USART_RECIEVER_ENABLE)|(1<<USART_RX_COMPLETE_INTERRUPT)|(1<<USART_RX_COMPLETE_INTERRUPT);
  92:	9a b1       	in	r25, 0x0a	; 10
  94:	98 69       	ori	r25, 0x98	; 152
  96:	9a b9       	out	0x0a, r25	; 10
	// Enable TX,RX,TX complete interrupt, Rx complete interrupt
	USART_BAUD_RATE_REGISTER_L =BAUD; 
  98:	89 b9       	out	0x09, r24	; 9
	USART_BAUD_RATE_REGISTER_H =(BAUD>>8);
  9a:	10 bc       	out	0x20, r1	; 32
	
	USART_CONTROL_STATUS_REGISTER_C |=(1<<USART_REGISTER_SELECT)|(1<<USART_CHARACTER_SIZE_BIT0)|(1<<USART_CHARACTER_SIZE_BIT1);
  9c:	80 b5       	in	r24, 0x20	; 32
  9e:	86 68       	ori	r24, 0x86	; 134
  a0:	80 bd       	out	0x20, r24	; 32
	// Set 8 bit character size, no parity, 1 stop bit
	
}
  a2:	08 95       	ret

000000a4 <USART_WRITE_BYTE>:

//////////////////////////////////////////////////////////////////////
void USART_WRITE_BYTE(unsigned char BYTE)
{
	while(!(USART_CONTROL_STATUS_REGISTER_A&(1<<UDRE)));
  a4:	5d 9b       	sbis	0x0b, 5	; 11
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <USART_WRITE_BYTE>
	UDR=BYTE;
  a8:	8c b9       	out	0x0c, r24	; 12
}
  aa:	08 95       	ret

000000ac <USART_WRITE_STRING>:
///////////////////////////////////////////////////////////////////////
void USART_WRITE_STRING(unsigned char *pointer)
{
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	ec 01       	movw	r28, r24
	while(*pointer)
  b2:	88 81       	ld	r24, Y
  b4:	88 23       	and	r24, r24
  b6:	31 f0       	breq	.+12     	; 0xc4 <USART_WRITE_STRING+0x18>
{
	while(!(USART_CONTROL_STATUS_REGISTER_A&(1<<UDRE)));
	UDR=BYTE;
}
///////////////////////////////////////////////////////////////////////
void USART_WRITE_STRING(unsigned char *pointer)
  b8:	21 96       	adiw	r28, 0x01	; 1
{
	while(*pointer)
	{
		USART_WRITE_BYTE(*pointer);
  ba:	0e 94 52 00 	call	0xa4	; 0xa4 <USART_WRITE_BYTE>
	UDR=BYTE;
}
///////////////////////////////////////////////////////////////////////
void USART_WRITE_STRING(unsigned char *pointer)
{
	while(*pointer)
  be:	89 91       	ld	r24, Y+
  c0:	88 23       	and	r24, r24
  c2:	d9 f7       	brne	.-10     	; 0xba <USART_WRITE_STRING+0xe>
	{
		USART_WRITE_BYTE(*pointer);
		pointer++;
	}
}
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <USART_DATA_AVAILABLE>:

unsigned char USART_DATA_AVAILABLE()
{
	unsigned char check=0;
   if(USART_CONTROL_STATUS_REGISTER_A & (1<<RXC))
  ca:	8b b1       	in	r24, 0x0b	; 11
   check=1;
   else
   check=0;

   return check;
}
  cc:	88 1f       	adc	r24, r24
  ce:	88 27       	eor	r24, r24
  d0:	88 1f       	adc	r24, r24
  d2:	08 95       	ret

000000d4 <USART_READ_BYTE>:

unsigned char USART_READ_BYTE()
{
	if (USART_DATA_AVAILABLE())
  d4:	0e 94 65 00 	call	0xca	; 0xca <USART_DATA_AVAILABLE>
  d8:	88 23       	and	r24, r24
  da:	11 f0       	breq	.+4      	; 0xe0 <USART_READ_BYTE+0xc>
	{
		return UDR;
  dc:	8c b1       	in	r24, 0x0c	; 12
  de:	08 95       	ret
	}

   
}
  e0:	08 95       	ret

000000e2 <USART_READ_STRING>:

void USART_READ_STRING(unsigned char string_long,unsigned char *string_address)
{
  e2:	cf 92       	push	r12
  e4:	df 92       	push	r13
  e6:	ef 92       	push	r14
  e8:	ff 92       	push	r15
  ea:	0f 93       	push	r16
  ec:	1f 93       	push	r17
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	7b 01       	movw	r14, r22
	unsigned char i=1;
	for (i=1;i<string_long;i++)
  f4:	82 30       	cpi	r24, 0x02	; 2
  f6:	a8 f0       	brcs	.+42     	; 0x122 <USART_READ_STRING+0x40>
	}

   
}

void USART_READ_STRING(unsigned char string_long,unsigned char *string_address)
  f8:	82 50       	subi	r24, 0x02	; 2
  fa:	c8 2e       	mov	r12, r24
  fc:	dd 24       	eor	r13, r13
  fe:	eb 01       	movw	r28, r22
 100:	cc 0d       	add	r28, r12
 102:	dd 1d       	adc	r29, r13
 104:	21 96       	adiw	r28, 0x01	; 1
 106:	8b 01       	movw	r16, r22
{
	unsigned char i=1;
	for (i=1;i<string_long;i++)
	{
		*string_address=USART_READ_BYTE();
 108:	0e 94 6a 00 	call	0xd4	; 0xd4 <USART_READ_BYTE>
 10c:	f8 01       	movw	r30, r16
 10e:	81 93       	st	Z+, r24
 110:	8f 01       	movw	r16, r30
}

void USART_READ_STRING(unsigned char string_long,unsigned char *string_address)
{
	unsigned char i=1;
	for (i=1;i<string_long;i++)
 112:	ec 17       	cp	r30, r28
 114:	fd 07       	cpc	r31, r29
 116:	c1 f7       	brne	.-16     	; 0x108 <USART_READ_STRING+0x26>
	}

   
}

void USART_READ_STRING(unsigned char string_long,unsigned char *string_address)
 118:	08 94       	sec
 11a:	c1 1c       	adc	r12, r1
 11c:	d1 1c       	adc	r13, r1
{
	unsigned char i=1;
	for (i=1;i<string_long;i++)
 11e:	ec 0c       	add	r14, r12
 120:	fd 1c       	adc	r15, r13
	{
		*string_address=USART_READ_BYTE();
		string_address++;
		
	}
	*string_address=0;
 122:	f7 01       	movw	r30, r14
 124:	10 82       	st	Z, r1
	
}
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	1f 91       	pop	r17
 12c:	0f 91       	pop	r16
 12e:	ff 90       	pop	r15
 130:	ef 90       	pop	r14
 132:	df 90       	pop	r13
 134:	cf 90       	pop	r12
 136:	08 95       	ret

00000138 <USART_WRITE_Float>:

void USART_WRITE_Float( float float_value)
{
 138:	1f 93       	push	r17
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
	long int vlaue = 0;
	unsigned int x,y;
	vlaue=(float_value)*100;
 13e:	20 e0       	ldi	r18, 0x00	; 0
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	48 ec       	ldi	r20, 0xC8	; 200
 144:	52 e4       	ldi	r21, 0x42	; 66
 146:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__mulsf3>
 14a:	0e 94 5f 04 	call	0x8be	; 0x8be <__fixsfsi>
	y=vlaue % 100;   // kasr
 14e:	24 e6       	ldi	r18, 0x64	; 100
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	40 e0       	ldi	r20, 0x00	; 0
 154:	50 e0       	ldi	r21, 0x00	; 0
 156:	0e 94 81 05 	call	0xb02	; 0xb02 <__divmodsi4>
 15a:	13 2f       	mov	r17, r19
 15c:	d6 2f       	mov	r29, r22
 15e:	c7 2f       	mov	r28, r23
	x=vlaue / 100;   // sa7e7
	
	USART_WRITE_BYTE((char)x);
 160:	82 2f       	mov	r24, r18
 162:	0e 94 52 00 	call	0xa4	; 0xa4 <USART_WRITE_BYTE>
	USART_WRITE_BYTE((char)(x>>8));
 166:	81 2f       	mov	r24, r17
 168:	0e 94 52 00 	call	0xa4	; 0xa4 <USART_WRITE_BYTE>
	USART_WRITE_BYTE((char)y);
 16c:	8d 2f       	mov	r24, r29
 16e:	0e 94 52 00 	call	0xa4	; 0xa4 <USART_WRITE_BYTE>
	USART_WRITE_BYTE((char)(y>>8));
 172:	8c 2f       	mov	r24, r28
 174:	0e 94 52 00 	call	0xa4	; 0xa4 <USART_WRITE_BYTE>
	
}
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	1f 91       	pop	r17
 17e:	08 95       	ret

00000180 <USART_READ_FLoat>:

float USART_READ_FLoat()
{
 180:	cf 92       	push	r12
 182:	df 92       	push	r13
 184:	ef 92       	push	r14
 186:	ff 92       	push	r15
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	00 d0       	rcall	.+0      	; 0x192 <USART_READ_FLoat+0x12>
 192:	00 d0       	rcall	.+0      	; 0x194 <USART_READ_FLoat+0x14>
 194:	cd b7       	in	r28, 0x3d	; 61
 196:	de b7       	in	r29, 0x3e	; 62
	char buffer1[5]={0};
	char buffer2[5]={0};	
	char i=0;
	int x[2]={0};
 198:	19 82       	std	Y+1, r1	; 0x01
 19a:	1a 82       	std	Y+2, r1	; 0x02
 19c:	1b 82       	std	Y+3, r1	; 0x03
 19e:	1c 82       	std	Y+4, r1	; 0x04
 1a0:	8e 01       	movw	r16, r28
 1a2:	0f 5f       	subi	r16, 0xFF	; 255
 1a4:	1f 4f       	sbci	r17, 0xFF	; 255
	USART_WRITE_BYTE((char)y);
	USART_WRITE_BYTE((char)(y>>8));
	
}

float USART_READ_FLoat()
 1a6:	0f 2e       	mov	r0, r31
 1a8:	f5 e0       	ldi	r31, 0x05	; 5
 1aa:	ef 2e       	mov	r14, r31
 1ac:	ff 24       	eor	r15, r15
 1ae:	f0 2d       	mov	r31, r0
 1b0:	ec 0e       	add	r14, r28
 1b2:	fd 1e       	adc	r15, r29
	char i=0;
	int x[2]={0};
	float vlaue;
	for (i=0;i<2;i++)
	{
		while(!(USART_DATA_AVAILABLE()))
 1b4:	0e 94 65 00 	call	0xca	; 0xca <USART_DATA_AVAILABLE>
 1b8:	88 23       	and	r24, r24
 1ba:	e1 f3       	breq	.-8      	; 0x1b4 <USART_READ_FLoat+0x34>
		{
			
		}
		x[i]=USART_READ_BYTE();
 1bc:	0e 94 6a 00 	call	0xd4	; 0xd4 <USART_READ_BYTE>
 1c0:	f8 01       	movw	r30, r16
 1c2:	80 83       	st	Z, r24
 1c4:	11 82       	std	Z+1, r1	; 0x01
 1c6:	0e 5f       	subi	r16, 0xFE	; 254
 1c8:	1f 4f       	sbci	r17, 0xFF	; 255
	char buffer1[5]={0};
	char buffer2[5]={0};	
	char i=0;
	int x[2]={0};
	float vlaue;
	for (i=0;i<2;i++)
 1ca:	0e 15       	cp	r16, r14
 1cc:	1f 05       	cpc	r17, r15
 1ce:	91 f7       	brne	.-28     	; 0x1b4 <USART_READ_FLoat+0x34>
		x[i]=USART_READ_BYTE();
		
	}
	
	
	vlaue=((float)(x[0]))+(((float)x[1])/100);
 1d0:	69 81       	ldd	r22, Y+1	; 0x01
 1d2:	7a 81       	ldd	r23, Y+2	; 0x02
 1d4:	88 27       	eor	r24, r24
 1d6:	77 fd       	sbrc	r23, 7
 1d8:	80 95       	com	r24
 1da:	98 2f       	mov	r25, r24
 1dc:	0e 94 92 04 	call	0x924	; 0x924 <__floatsisf>
 1e0:	6b 01       	movw	r12, r22
 1e2:	7c 01       	movw	r14, r24
 1e4:	6b 81       	ldd	r22, Y+3	; 0x03
 1e6:	7c 81       	ldd	r23, Y+4	; 0x04
 1e8:	88 27       	eor	r24, r24
 1ea:	77 fd       	sbrc	r23, 7
 1ec:	80 95       	com	r24
 1ee:	98 2f       	mov	r25, r24
 1f0:	0e 94 92 04 	call	0x924	; 0x924 <__floatsisf>
 1f4:	20 e0       	ldi	r18, 0x00	; 0
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	48 ec       	ldi	r20, 0xC8	; 200
 1fa:	52 e4       	ldi	r21, 0x42	; 66
 1fc:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__divsf3>
 200:	9b 01       	movw	r18, r22
 202:	ac 01       	movw	r20, r24
 204:	c7 01       	movw	r24, r14
 206:	b6 01       	movw	r22, r12
 208:	0e 94 93 03 	call	0x726	; 0x726 <__addsf3>
	
	return vlaue;
}
 20c:	46 2f       	mov	r20, r22
 20e:	57 2f       	mov	r21, r23
 210:	68 2f       	mov	r22, r24
 212:	79 2f       	mov	r23, r25
 214:	cb 01       	movw	r24, r22
 216:	ba 01       	movw	r22, r20
 218:	0f 90       	pop	r0
 21a:	0f 90       	pop	r0
 21c:	0f 90       	pop	r0
 21e:	0f 90       	pop	r0
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	0f 91       	pop	r16
 228:	ff 90       	pop	r15
 22a:	ef 90       	pop	r14
 22c:	df 90       	pop	r13
 22e:	cf 90       	pop	r12
 230:	08 95       	ret

00000232 <__vector_6>:




ISR(TIMER1_CAPT_vect)
{
 232:	1f 92       	push	r1
 234:	0f 92       	push	r0
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	0f 92       	push	r0
 23a:	11 24       	eor	r1, r1
 23c:	2f 93       	push	r18
 23e:	3f 93       	push	r19
 240:	8f 93       	push	r24
 242:	9f 93       	push	r25
	CurrentCaptureTime=ICR1;
 244:	86 b5       	in	r24, 0x26	; 38
 246:	97 b5       	in	r25, 0x27	; 39
 248:	90 93 cf 00 	sts	0x00CF, r25
 24c:	80 93 ce 00 	sts	0x00CE, r24
	NewBitTime=(CurrentCaptureTime-PreviousCaptureTime);
 250:	80 91 ce 00 	lds	r24, 0x00CE
 254:	90 91 cf 00 	lds	r25, 0x00CF
 258:	20 91 d0 00 	lds	r18, 0x00D0
 25c:	30 91 d1 00 	lds	r19, 0x00D1
 260:	82 1b       	sub	r24, r18
 262:	93 0b       	sbc	r25, r19
 264:	90 93 c3 00 	sts	0x00C3, r25
 268:	80 93 c2 00 	sts	0x00C2, r24
	PreviousCaptureTime=CurrentCaptureTime;
 26c:	80 91 ce 00 	lds	r24, 0x00CE
 270:	90 91 cf 00 	lds	r25, 0x00CF
 274:	90 93 d1 00 	sts	0x00D1, r25
 278:	80 93 d0 00 	sts	0x00D0, r24
	NewBitTimeFlag=1;
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	80 93 c1 00 	sts	0x00C1, r24
	
}
 282:	9f 91       	pop	r25
 284:	8f 91       	pop	r24
 286:	3f 91       	pop	r19
 288:	2f 91       	pop	r18
 28a:	0f 90       	pop	r0
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	0f 90       	pop	r0
 290:	1f 90       	pop	r1
 292:	18 95       	reti

00000294 <setUp>:


void setUp(void)
{
	USART_INIT(16);			/* 57600 baud rate				*/
 294:	80 e1       	ldi	r24, 0x10	; 16
 296:	0e 94 49 00 	call	0x92	; 0x92 <USART_INIT>
	TCCR1B|=(1<<CS12);		/* 265 prescale					*/
 29a:	8e b5       	in	r24, 0x2e	; 46
 29c:	84 60       	ori	r24, 0x04	; 4
 29e:	8e bd       	out	0x2e, r24	; 46
	TCCR1B|=(1<<ICNC1);		/* noice canceller				*/
 2a0:	8e b5       	in	r24, 0x2e	; 46
 2a2:	80 68       	ori	r24, 0x80	; 128
 2a4:	8e bd       	out	0x2e, r24	; 46
	TCCR1B&=~(1<<ICES1);	/* negative edge select			*/
 2a6:	8e b5       	in	r24, 0x2e	; 46
 2a8:	8f 7b       	andi	r24, 0xBF	; 191
 2aa:	8e bd       	out	0x2e, r24	; 46
	DDRD&=~(1<<PD6);		/* Input capture pin (input)	*/
 2ac:	8e 98       	cbi	0x11, 6	; 17
	TIMSK|=(1<<TICIE1);		/* input capture interrupt		*/
 2ae:	89 b7       	in	r24, 0x39	; 57
 2b0:	80 62       	ori	r24, 0x20	; 32
 2b2:	89 bf       	out	0x39, r24	; 57
	sei();					/* set global interrupt			*/
 2b4:	78 94       	sei
	
}
 2b6:	08 95       	ret

000002b8 <getCode>:

void getCode(uint16_t* NewBitTimeDuration,unsigned long* IrCommandBuffer,uint8_t* Iraddress,uint8_t* IrCommand, uint8_t* NewIrCommandFlag)
{
 2b8:	4f 92       	push	r4
 2ba:	5f 92       	push	r5
 2bc:	6f 92       	push	r6
 2be:	7f 92       	push	r7
 2c0:	8f 92       	push	r8
 2c2:	9f 92       	push	r9
 2c4:	af 92       	push	r10
 2c6:	bf 92       	push	r11
 2c8:	cf 92       	push	r12
 2ca:	df 92       	push	r13
 2cc:	ef 92       	push	r14
 2ce:	ff 92       	push	r15
 2d0:	0f 93       	push	r16
 2d2:	1f 93       	push	r17
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	fc 01       	movw	r30, r24
 2da:	eb 01       	movw	r28, r22
 2dc:	6a 01       	movw	r12, r20
 2de:	79 01       	movw	r14, r18
	static unsigned char StartBit=32;
	static unsigned char CurrentBitPosition=0;
	
	if ((*NewBitTimeDuration)<1) /* negative value >> overflow */
 2e0:	80 81       	ld	r24, Z
 2e2:	91 81       	ldd	r25, Z+1	; 0x01
 2e4:	00 97       	sbiw	r24, 0x00	; 0
 2e6:	89 f4       	brne	.+34     	; 0x30a <getCode+0x52>
	{
		NewBitTime+=65536;
 2e8:	80 91 c2 00 	lds	r24, 0x00C2
 2ec:	90 91 c3 00 	lds	r25, 0x00C3
 2f0:	90 93 c3 00 	sts	0x00C3, r25
 2f4:	80 93 c2 00 	sts	0x00C2, r24
		if ((*NewBitTimeDuration)<1) /* still negative >> garbage time */
 2f8:	80 81       	ld	r24, Z
 2fa:	91 81       	ldd	r25, Z+1	; 0x01
 2fc:	00 97       	sbiw	r24, 0x00	; 0
 2fe:	29 f4       	brne	.+10     	; 0x30a <getCode+0x52>
		{
			IrCommandBuffer=0;
			CurrentBitPosition=0;
 300:	10 92 bf 00 	sts	0x00BF, r1
			StartBit=0;
 304:	10 92 bd 00 	sts	0x00BD, r1
			return;
 308:	82 c0       	rjmp	.+260    	; 0x40e <getCode+0x156>
		}
	}
	
	if (StartBit==1)
 30a:	80 91 bd 00 	lds	r24, 0x00BD
 30e:	81 30       	cpi	r24, 0x01	; 1
 310:	09 f0       	breq	.+2      	; 0x314 <getCode+0x5c>
 312:	5d c0       	rjmp	.+186    	; 0x3ce <getCode+0x116>
	{
		if ((*NewBitTimeDuration)>=60 && (*NewBitTimeDuration)<=80) /* Time of Zero bit */
 314:	80 81       	ld	r24, Z
 316:	91 81       	ldd	r25, Z+1	; 0x01
 318:	9c 01       	movw	r18, r24
 31a:	2c 53       	subi	r18, 0x3C	; 60
 31c:	30 40       	sbci	r19, 0x00	; 0
 31e:	25 31       	cpi	r18, 0x15	; 21
 320:	31 05       	cpc	r19, r1
 322:	28 f5       	brcc	.+74     	; 0x36e <getCode+0xb6>
		{
			*IrCommandBuffer&=~(1UL<<(--CurrentBitPosition));
 324:	88 80       	ld	r8, Y
 326:	99 80       	ldd	r9, Y+1	; 0x01
 328:	aa 80       	ldd	r10, Y+2	; 0x02
 32a:	bb 80       	ldd	r11, Y+3	; 0x03
 32c:	80 91 bf 00 	lds	r24, 0x00BF
 330:	81 50       	subi	r24, 0x01	; 1
 332:	80 93 bf 00 	sts	0x00BF, r24
 336:	41 e0       	ldi	r20, 0x01	; 1
 338:	50 e0       	ldi	r21, 0x00	; 0
 33a:	60 e0       	ldi	r22, 0x00	; 0
 33c:	70 e0       	ldi	r23, 0x00	; 0
 33e:	2a 01       	movw	r4, r20
 340:	3b 01       	movw	r6, r22
 342:	04 c0       	rjmp	.+8      	; 0x34c <getCode+0x94>
 344:	44 0c       	add	r4, r4
 346:	55 1c       	adc	r5, r5
 348:	66 1c       	adc	r6, r6
 34a:	77 1c       	adc	r7, r7
 34c:	8a 95       	dec	r24
 34e:	d2 f7       	brpl	.-12     	; 0x344 <getCode+0x8c>
 350:	d3 01       	movw	r26, r6
 352:	c2 01       	movw	r24, r4
 354:	80 95       	com	r24
 356:	90 95       	com	r25
 358:	a0 95       	com	r26
 35a:	b0 95       	com	r27
 35c:	88 21       	and	r24, r8
 35e:	99 21       	and	r25, r9
 360:	aa 21       	and	r26, r10
 362:	bb 21       	and	r27, r11
 364:	88 83       	st	Y, r24
 366:	99 83       	std	Y+1, r25	; 0x01
 368:	aa 83       	std	Y+2, r26	; 0x02
 36a:	bb 83       	std	Y+3, r27	; 0x03
 36c:	3e c0       	rjmp	.+124    	; 0x3ea <getCode+0x132>
		}
		else if ((*NewBitTimeDuration)>=130 && (*NewBitTimeDuration)<=150) /* Time of One bit */
 36e:	82 58       	subi	r24, 0x82	; 130
 370:	90 40       	sbci	r25, 0x00	; 0
 372:	85 31       	cpi	r24, 0x15	; 21
 374:	91 05       	cpc	r25, r1
 376:	08 f5       	brcc	.+66     	; 0x3ba <getCode+0x102>
		{
			*IrCommandBuffer|=(1UL<<(--CurrentBitPosition));
 378:	88 80       	ld	r8, Y
 37a:	99 80       	ldd	r9, Y+1	; 0x01
 37c:	aa 80       	ldd	r10, Y+2	; 0x02
 37e:	bb 80       	ldd	r11, Y+3	; 0x03
 380:	80 91 bf 00 	lds	r24, 0x00BF
 384:	81 50       	subi	r24, 0x01	; 1
 386:	80 93 bf 00 	sts	0x00BF, r24
 38a:	41 e0       	ldi	r20, 0x01	; 1
 38c:	50 e0       	ldi	r21, 0x00	; 0
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	70 e0       	ldi	r23, 0x00	; 0
 392:	2a 01       	movw	r4, r20
 394:	3b 01       	movw	r6, r22
 396:	04 c0       	rjmp	.+8      	; 0x3a0 <getCode+0xe8>
 398:	44 0c       	add	r4, r4
 39a:	55 1c       	adc	r5, r5
 39c:	66 1c       	adc	r6, r6
 39e:	77 1c       	adc	r7, r7
 3a0:	8a 95       	dec	r24
 3a2:	d2 f7       	brpl	.-12     	; 0x398 <getCode+0xe0>
 3a4:	d3 01       	movw	r26, r6
 3a6:	c2 01       	movw	r24, r4
 3a8:	88 29       	or	r24, r8
 3aa:	99 29       	or	r25, r9
 3ac:	aa 29       	or	r26, r10
 3ae:	bb 29       	or	r27, r11
 3b0:	88 83       	st	Y, r24
 3b2:	99 83       	std	Y+1, r25	; 0x01
 3b4:	aa 83       	std	Y+2, r26	; 0x02
 3b6:	bb 83       	std	Y+3, r27	; 0x03
 3b8:	18 c0       	rjmp	.+48     	; 0x3ea <getCode+0x132>
		}
		else /*error IR bit time >> ignore the whole command and recieve new one*/
		{
			
			*IrCommandBuffer=0;
 3ba:	18 82       	st	Y, r1
 3bc:	19 82       	std	Y+1, r1	; 0x01
 3be:	1a 82       	std	Y+2, r1	; 0x02
 3c0:	1b 82       	std	Y+3, r1	; 0x03
			CurrentBitPosition=32;
 3c2:	80 e2       	ldi	r24, 0x20	; 32
 3c4:	80 93 bf 00 	sts	0x00BF, r24
			StartBit=0;
 3c8:	10 92 bd 00 	sts	0x00BD, r1
			return;
 3cc:	20 c0       	rjmp	.+64     	; 0x40e <getCode+0x156>
		}
		
		
	}
	else if((*NewBitTimeDuration)>=800 && (*NewBitTimeDuration)<=900)
 3ce:	80 81       	ld	r24, Z
 3d0:	91 81       	ldd	r25, Z+1	; 0x01
 3d2:	80 52       	subi	r24, 0x20	; 32
 3d4:	93 40       	sbci	r25, 0x03	; 3
 3d6:	85 36       	cpi	r24, 0x65	; 101
 3d8:	91 05       	cpc	r25, r1
 3da:	38 f4       	brcc	.+14     	; 0x3ea <getCode+0x132>
	{
		StartBit=1;
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	80 93 bd 00 	sts	0x00BD, r24
		*IrCommandBuffer=0;
 3e2:	18 82       	st	Y, r1
 3e4:	19 82       	std	Y+1, r1	; 0x01
 3e6:	1a 82       	std	Y+2, r1	; 0x02
 3e8:	1b 82       	std	Y+3, r1	; 0x03
	}
	
	if(CurrentBitPosition==0)
 3ea:	80 91 bf 00 	lds	r24, 0x00BF
 3ee:	88 23       	and	r24, r24
 3f0:	71 f4       	brne	.+28     	; 0x40e <getCode+0x156>
	{
		*NewIrCommandFlag=1;
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	f8 01       	movw	r30, r16
 3f6:	80 83       	st	Z, r24
		*IrCommand=(char)(*IrCommandBuffer);
 3f8:	88 81       	ld	r24, Y
 3fa:	f7 01       	movw	r30, r14
 3fc:	80 83       	st	Z, r24
		*Iraddress=(char)((*IrCommandBuffer)>>16);
 3fe:	8a 81       	ldd	r24, Y+2	; 0x02
 400:	f6 01       	movw	r30, r12
 402:	80 83       	st	Z, r24
		CurrentBitPosition=32;
 404:	80 e2       	ldi	r24, 0x20	; 32
 406:	80 93 bf 00 	sts	0x00BF, r24
		StartBit=0;
 40a:	10 92 bd 00 	sts	0x00BD, r1
	}
	
}
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	1f 91       	pop	r17
 414:	0f 91       	pop	r16
 416:	ff 90       	pop	r15
 418:	ef 90       	pop	r14
 41a:	df 90       	pop	r13
 41c:	cf 90       	pop	r12
 41e:	bf 90       	pop	r11
 420:	af 90       	pop	r10
 422:	9f 90       	pop	r9
 424:	8f 90       	pop	r8
 426:	7f 90       	pop	r7
 428:	6f 90       	pop	r6
 42a:	5f 90       	pop	r5
 42c:	4f 90       	pop	r4
 42e:	08 95       	ret

00000430 <GetPassword>:

void GetPassword(uint8_t* IrAddress,uint8_t* IrCommand,uint8_t* PasswordFlag,uint8_t* Password)
{
	static uint8_t PasswordIndex=0;
	
	if (*IrAddress==DEVICEADDRESS)
 430:	fc 01       	movw	r30, r24
 432:	80 81       	ld	r24, Z
 434:	8f 3f       	cpi	r24, 0xFF	; 255
 436:	09 f0       	breq	.+2      	; 0x43a <GetPassword+0xa>
 438:	b9 c0       	rjmp	.+370    	; 0x5ac <GetPassword+0x17c>
	{
		if (*IrCommand==POWER)
 43a:	fb 01       	movw	r30, r22
 43c:	90 81       	ld	r25, Z
 43e:	9d 35       	cpi	r25, 0x5D	; 93
 440:	a1 f4       	brne	.+40     	; 0x46a <GetPassword+0x3a>
		{
			if (PasswordIndex<PASSMAXLENGTH)
 442:	80 91 c0 00 	lds	r24, 0x00C0
 446:	8a 30       	cpi	r24, 0x0A	; 10
 448:	28 f4       	brcc	.+10     	; 0x454 <GetPassword+0x24>
			{
				Password[PasswordIndex]=0;
 44a:	f9 01       	movw	r30, r18
 44c:	e8 0f       	add	r30, r24
 44e:	f1 1d       	adc	r31, r1
 450:	10 82       	st	Z, r1
 452:	02 c0       	rjmp	.+4      	; 0x458 <GetPassword+0x28>
			}
			else
			{
				Password[PASSMAXLENGTH]=0;
 454:	f9 01       	movw	r30, r18
 456:	12 86       	std	Z+10, r1	; 0x0a
			}
			
			*PasswordFlag=NEWPASSWORD;
 458:	86 e0       	ldi	r24, 0x06	; 6
 45a:	fa 01       	movw	r30, r20
 45c:	80 83       	st	Z, r24
			PasswordIndex=0;
 45e:	10 92 c0 00 	sts	0x00C0, r1
			USART_WRITE_STRING(Password);
 462:	c9 01       	movw	r24, r18
 464:	0e 94 56 00 	call	0xac	; 0xac <USART_WRITE_STRING>
 468:	08 95       	ret
			
		}
		else if (PasswordIndex<PASSMAXLENGTH)
 46a:	80 91 c0 00 	lds	r24, 0x00C0
 46e:	8a 30       	cpi	r24, 0x0A	; 10
 470:	08 f0       	brcs	.+2      	; 0x474 <GetPassword+0x44>
 472:	9c c0       	rjmp	.+312    	; 0x5ac <GetPassword+0x17c>
		{
			switch(*IrCommand)
 474:	95 3b       	cpi	r25, 0xB5	; 181
 476:	09 f4       	brne	.+2      	; 0x47a <GetPassword+0x4a>
 478:	82 c0       	rjmp	.+260    	; 0x57e <GetPassword+0x14e>
 47a:	96 3b       	cpi	r25, 0xB6	; 182
 47c:	78 f4       	brcc	.+30     	; 0x49c <GetPassword+0x6c>
 47e:	97 39       	cpi	r25, 0x97	; 151
 480:	f1 f0       	breq	.+60     	; 0x4be <GetPassword+0x8e>
 482:	98 39       	cpi	r25, 0x98	; 152
 484:	20 f4       	brcc	.+8      	; 0x48e <GetPassword+0x5e>
 486:	95 38       	cpi	r25, 0x85	; 133
 488:	09 f0       	breq	.+2      	; 0x48c <GetPassword+0x5c>
 48a:	90 c0       	rjmp	.+288    	; 0x5ac <GetPassword+0x17c>
 48c:	3c c0       	rjmp	.+120    	; 0x506 <GetPassword+0xd6>
 48e:	95 3a       	cpi	r25, 0xA5	; 165
 490:	09 f4       	brne	.+2      	; 0x494 <GetPassword+0x64>
 492:	5d c0       	rjmp	.+186    	; 0x54e <GetPassword+0x11e>
 494:	9d 3a       	cpi	r25, 0xAD	; 173
 496:	09 f0       	breq	.+2      	; 0x49a <GetPassword+0x6a>
 498:	89 c0       	rjmp	.+274    	; 0x5ac <GetPassword+0x17c>
 49a:	7d c0       	rjmp	.+250    	; 0x596 <GetPassword+0x166>
 49c:	9f 3c       	cpi	r25, 0xCF	; 207
 49e:	d9 f0       	breq	.+54     	; 0x4d6 <GetPassword+0xa6>
 4a0:	90 3d       	cpi	r25, 0xD0	; 208
 4a2:	38 f4       	brcc	.+14     	; 0x4b2 <GetPassword+0x82>
 4a4:	9d 3b       	cpi	r25, 0xBD	; 189
 4a6:	09 f4       	brne	.+2      	; 0x4aa <GetPassword+0x7a>
 4a8:	5e c0       	rjmp	.+188    	; 0x566 <GetPassword+0x136>
 4aa:	97 3c       	cpi	r25, 0xC7	; 199
 4ac:	09 f0       	breq	.+2      	; 0x4b0 <GetPassword+0x80>
 4ae:	7e c0       	rjmp	.+252    	; 0x5ac <GetPassword+0x17c>
 4b0:	42 c0       	rjmp	.+132    	; 0x536 <GetPassword+0x106>
 4b2:	97 3e       	cpi	r25, 0xE7	; 231
 4b4:	e1 f0       	breq	.+56     	; 0x4ee <GetPassword+0xbe>
 4b6:	9f 3e       	cpi	r25, 0xEF	; 239
 4b8:	09 f0       	breq	.+2      	; 0x4bc <GetPassword+0x8c>
 4ba:	78 c0       	rjmp	.+240    	; 0x5ac <GetPassword+0x17c>
 4bc:	30 c0       	rjmp	.+96     	; 0x51e <GetPassword+0xee>
			{
				case ZERO:
				Password[PasswordIndex++]='0';
 4be:	28 0f       	add	r18, r24
 4c0:	31 1d       	adc	r19, r1
 4c2:	90 e3       	ldi	r25, 0x30	; 48
 4c4:	f9 01       	movw	r30, r18
 4c6:	90 83       	st	Z, r25
 4c8:	8f 5f       	subi	r24, 0xFF	; 255
 4ca:	80 93 c0 00 	sts	0x00C0, r24
				USART_WRITE_BYTE('0');
 4ce:	80 e3       	ldi	r24, 0x30	; 48
 4d0:	0e 94 52 00 	call	0xa4	; 0xa4 <USART_WRITE_BYTE>
				break;
 4d4:	08 95       	ret
				case ONE:
				Password[PasswordIndex++]='1';
 4d6:	28 0f       	add	r18, r24
 4d8:	31 1d       	adc	r19, r1
 4da:	91 e3       	ldi	r25, 0x31	; 49
 4dc:	f9 01       	movw	r30, r18
 4de:	90 83       	st	Z, r25
 4e0:	8f 5f       	subi	r24, 0xFF	; 255
 4e2:	80 93 c0 00 	sts	0x00C0, r24
				USART_WRITE_BYTE('1');
 4e6:	81 e3       	ldi	r24, 0x31	; 49
 4e8:	0e 94 52 00 	call	0xa4	; 0xa4 <USART_WRITE_BYTE>
				break;
 4ec:	08 95       	ret
				case TWO:
				Password[PasswordIndex++]='2';
 4ee:	28 0f       	add	r18, r24
 4f0:	31 1d       	adc	r19, r1
 4f2:	92 e3       	ldi	r25, 0x32	; 50
 4f4:	f9 01       	movw	r30, r18
 4f6:	90 83       	st	Z, r25
 4f8:	8f 5f       	subi	r24, 0xFF	; 255
 4fa:	80 93 c0 00 	sts	0x00C0, r24
				USART_WRITE_BYTE('2');
 4fe:	82 e3       	ldi	r24, 0x32	; 50
 500:	0e 94 52 00 	call	0xa4	; 0xa4 <USART_WRITE_BYTE>
				break;
 504:	08 95       	ret
				case THREE:
				Password[PasswordIndex++]='3';
 506:	28 0f       	add	r18, r24
 508:	31 1d       	adc	r19, r1
 50a:	93 e3       	ldi	r25, 0x33	; 51
 50c:	f9 01       	movw	r30, r18
 50e:	90 83       	st	Z, r25
 510:	8f 5f       	subi	r24, 0xFF	; 255
 512:	80 93 c0 00 	sts	0x00C0, r24
				USART_WRITE_BYTE('3');
 516:	83 e3       	ldi	r24, 0x33	; 51
 518:	0e 94 52 00 	call	0xa4	; 0xa4 <USART_WRITE_BYTE>
				break;
 51c:	08 95       	ret
				case FOUR:
				Password[PasswordIndex++]='4';
 51e:	28 0f       	add	r18, r24
 520:	31 1d       	adc	r19, r1
 522:	94 e3       	ldi	r25, 0x34	; 52
 524:	f9 01       	movw	r30, r18
 526:	90 83       	st	Z, r25
 528:	8f 5f       	subi	r24, 0xFF	; 255
 52a:	80 93 c0 00 	sts	0x00C0, r24
				USART_WRITE_BYTE('4');
 52e:	84 e3       	ldi	r24, 0x34	; 52
 530:	0e 94 52 00 	call	0xa4	; 0xa4 <USART_WRITE_BYTE>
				break;
 534:	08 95       	ret
				case FIVE:
				Password[PasswordIndex++]='5';
 536:	28 0f       	add	r18, r24
 538:	31 1d       	adc	r19, r1
 53a:	95 e3       	ldi	r25, 0x35	; 53
 53c:	f9 01       	movw	r30, r18
 53e:	90 83       	st	Z, r25
 540:	8f 5f       	subi	r24, 0xFF	; 255
 542:	80 93 c0 00 	sts	0x00C0, r24
				USART_WRITE_BYTE('5');
 546:	85 e3       	ldi	r24, 0x35	; 53
 548:	0e 94 52 00 	call	0xa4	; 0xa4 <USART_WRITE_BYTE>
				break;
 54c:	08 95       	ret
				case SIX:
				Password[PasswordIndex++]='6';
 54e:	28 0f       	add	r18, r24
 550:	31 1d       	adc	r19, r1
 552:	96 e3       	ldi	r25, 0x36	; 54
 554:	f9 01       	movw	r30, r18
 556:	90 83       	st	Z, r25
 558:	8f 5f       	subi	r24, 0xFF	; 255
 55a:	80 93 c0 00 	sts	0x00C0, r24
				USART_WRITE_BYTE('6');
 55e:	86 e3       	ldi	r24, 0x36	; 54
 560:	0e 94 52 00 	call	0xa4	; 0xa4 <USART_WRITE_BYTE>
				break;
 564:	08 95       	ret
				case SEVEN:
				Password[PasswordIndex++]='7';
 566:	28 0f       	add	r18, r24
 568:	31 1d       	adc	r19, r1
 56a:	97 e3       	ldi	r25, 0x37	; 55
 56c:	f9 01       	movw	r30, r18
 56e:	90 83       	st	Z, r25
 570:	8f 5f       	subi	r24, 0xFF	; 255
 572:	80 93 c0 00 	sts	0x00C0, r24
				USART_WRITE_BYTE('7');
 576:	87 e3       	ldi	r24, 0x37	; 55
 578:	0e 94 52 00 	call	0xa4	; 0xa4 <USART_WRITE_BYTE>
				break;
 57c:	08 95       	ret
				case EIGHT:
				Password[PasswordIndex++]='8';
 57e:	28 0f       	add	r18, r24
 580:	31 1d       	adc	r19, r1
 582:	98 e3       	ldi	r25, 0x38	; 56
 584:	f9 01       	movw	r30, r18
 586:	90 83       	st	Z, r25
 588:	8f 5f       	subi	r24, 0xFF	; 255
 58a:	80 93 c0 00 	sts	0x00C0, r24
				USART_WRITE_BYTE('8');
 58e:	88 e3       	ldi	r24, 0x38	; 56
 590:	0e 94 52 00 	call	0xa4	; 0xa4 <USART_WRITE_BYTE>
				break;
 594:	08 95       	ret
				case NINE:
				Password[PasswordIndex++]='9';
 596:	28 0f       	add	r18, r24
 598:	31 1d       	adc	r19, r1
 59a:	99 e3       	ldi	r25, 0x39	; 57
 59c:	f9 01       	movw	r30, r18
 59e:	90 83       	st	Z, r25
 5a0:	8f 5f       	subi	r24, 0xFF	; 255
 5a2:	80 93 c0 00 	sts	0x00C0, r24
				USART_WRITE_BYTE('9');
 5a6:	89 e3       	ldi	r24, 0x39	; 57
 5a8:	0e 94 52 00 	call	0xa4	; 0xa4 <USART_WRITE_BYTE>
 5ac:	08 95       	ret

000005ae <CheckPassword>:
	
	}	
}

void CheckPassword(uint8_t* Password,uint8_t* PasswordFlag)
{
 5ae:	0f 93       	push	r16
 5b0:	1f 93       	push	r17
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
 5b6:	ec 01       	movw	r28, r24
 5b8:	8b 01       	movw	r16, r22
	USART_WRITE_STRING("check");
 5ba:	80 e6       	ldi	r24, 0x60	; 96
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	0e 94 56 00 	call	0xac	; 0xac <USART_WRITE_STRING>
	if (*Password==NULL)
 5c2:	88 81       	ld	r24, Y
 5c4:	88 23       	and	r24, r24
 5c6:	41 f4       	brne	.+16     	; 0x5d8 <CheckPassword+0x2a>
	{
		*PasswordFlag=EMPTYPASSWORD;
 5c8:	85 e0       	ldi	r24, 0x05	; 5
 5ca:	f8 01       	movw	r30, r16
 5cc:	80 83       	st	Z, r24
		USART_WRITE_STRING("emptyyy");
 5ce:	86 e6       	ldi	r24, 0x66	; 102
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	0e 94 56 00 	call	0xac	; 0xac <USART_WRITE_STRING>
 5d6:	19 c0       	rjmp	.+50     	; 0x60a <CheckPassword+0x5c>
	}
	else if(!strcmp(Password,SYSTEMPASSWORD))
 5d8:	ce 01       	movw	r24, r28
 5da:	6e e6       	ldi	r22, 0x6E	; 110
 5dc:	70 e0       	ldi	r23, 0x00	; 0
 5de:	0e 94 be 05 	call	0xb7c	; 0xb7c <strcmp>
 5e2:	28 2f       	mov	r18, r24
 5e4:	39 2f       	mov	r19, r25
 5e6:	21 15       	cp	r18, r1
 5e8:	31 05       	cpc	r19, r1
 5ea:	41 f4       	brne	.+16     	; 0x5fc <CheckPassword+0x4e>
	{
		*PasswordFlag=CORRECT;
 5ec:	83 e0       	ldi	r24, 0x03	; 3
 5ee:	f8 01       	movw	r30, r16
 5f0:	80 83       	st	Z, r24
		USART_WRITE_STRING("correcttt");
 5f2:	84 e7       	ldi	r24, 0x74	; 116
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	0e 94 56 00 	call	0xac	; 0xac <USART_WRITE_STRING>
 5fa:	07 c0       	rjmp	.+14     	; 0x60a <CheckPassword+0x5c>
	}
	else
	{
		*PasswordFlag=INCORRECT;
 5fc:	84 e0       	ldi	r24, 0x04	; 4
 5fe:	f8 01       	movw	r30, r16
 600:	80 83       	st	Z, r24
		USART_WRITE_STRING("incorrecttt");
 602:	8e e7       	ldi	r24, 0x7E	; 126
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	0e 94 56 00 	call	0xac	; 0xac <USART_WRITE_STRING>
	}
	
}
 60a:	df 91       	pop	r29
 60c:	cf 91       	pop	r28
 60e:	1f 91       	pop	r17
 610:	0f 91       	pop	r16
 612:	08 95       	ret

00000614 <main>:

int main(void)
{
 614:	cf 93       	push	r28
 616:	df 93       	push	r29
 618:	cd b7       	in	r28, 0x3d	; 61
 61a:	de b7       	in	r29, 0x3e	; 62
 61c:	62 97       	sbiw	r28, 0x12	; 18
 61e:	0f b6       	in	r0, 0x3f	; 63
 620:	f8 94       	cli
 622:	de bf       	out	0x3e, r29	; 62
 624:	0f be       	out	0x3f, r0	; 63
 626:	cd bf       	out	0x3d, r28	; 61
	setUp();
 628:	0e 94 4a 01 	call	0x294	; 0x294 <setUp>
	USART_WRITE_STRING("Starting : ");
 62c:	8a e8       	ldi	r24, 0x8A	; 138
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	0e 94 56 00 	call	0xac	; 0xac <USART_WRITE_STRING>
	unsigned long Buffer=0;
 634:	19 82       	std	Y+1, r1	; 0x01
 636:	1a 82       	std	Y+2, r1	; 0x02
 638:	1b 82       	std	Y+3, r1	; 0x03
 63a:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t IrCmd=0;
 63c:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t IrAddress=0;
 63e:	1e 82       	std	Y+6, r1	; 0x06
	uint8_t NewIrCmdFlag=0;
 640:	1f 82       	std	Y+7, r1	; 0x07
	uint8_t ReceivedPassword[10]={0};
 642:	fe 01       	movw	r30, r28
 644:	38 96       	adiw	r30, 0x08	; 8
 646:	8a e0       	ldi	r24, 0x0A	; 10
 648:	df 01       	movw	r26, r30
 64a:	1d 92       	st	X+, r1
 64c:	8a 95       	dec	r24
 64e:	e9 f7       	brne	.-6      	; 0x64a <main+0x36>
	uint8_t ReceivedPasswordFlag=0;	
 650:	1a 8a       	std	Y+18, r1	; 0x12
    {
		
		if (NewBitTimeFlag)
		{
			NewBitTimeFlag=0;
			getCode(&NewBitTime,&Buffer,&IrAddress,&IrCmd,&NewIrCmdFlag);
 652:	0f 2e       	mov	r0, r31
 654:	f2 ec       	ldi	r31, 0xC2	; 194
 656:	ef 2e       	mov	r14, r31
 658:	f0 e0       	ldi	r31, 0x00	; 0
 65a:	ff 2e       	mov	r15, r31
 65c:	f0 2d       	mov	r31, r0
	
	
    while(1)
    {
		
		if (NewBitTimeFlag)
 65e:	80 91 c1 00 	lds	r24, 0x00C1
 662:	88 23       	and	r24, r24
 664:	e1 f3       	breq	.-8      	; 0x65e <main+0x4a>
		{
			NewBitTimeFlag=0;
 666:	10 92 c1 00 	sts	0x00C1, r1
			getCode(&NewBitTime,&Buffer,&IrAddress,&IrCmd,&NewIrCmdFlag);
 66a:	c7 01       	movw	r24, r14
 66c:	be 01       	movw	r22, r28
 66e:	6f 5f       	subi	r22, 0xFF	; 255
 670:	7f 4f       	sbci	r23, 0xFF	; 255
 672:	ae 01       	movw	r20, r28
 674:	4a 5f       	subi	r20, 0xFA	; 250
 676:	5f 4f       	sbci	r21, 0xFF	; 255
 678:	9e 01       	movw	r18, r28
 67a:	2b 5f       	subi	r18, 0xFB	; 251
 67c:	3f 4f       	sbci	r19, 0xFF	; 255
 67e:	8e 01       	movw	r16, r28
 680:	09 5f       	subi	r16, 0xF9	; 249
 682:	1f 4f       	sbci	r17, 0xFF	; 255
 684:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <getCode>
			if (NewIrCmdFlag==1)
 688:	8f 81       	ldd	r24, Y+7	; 0x07
 68a:	81 30       	cpi	r24, 0x01	; 1
 68c:	41 f7       	brne	.-48     	; 0x65e <main+0x4a>
			{
				NewIrCmdFlag=0;
 68e:	1f 82       	std	Y+7, r1	; 0x07
				if (SysStatus==LOCKED)
 690:	80 91 be 00 	lds	r24, 0x00BE
 694:	88 23       	and	r24, r24
 696:	61 f4       	brne	.+24     	; 0x6b0 <main+0x9c>
				{
					if (IrCmd==POWER)
 698:	8d 81       	ldd	r24, Y+5	; 0x05
 69a:	8d 35       	cpi	r24, 0x5D	; 93
 69c:	09 f0       	breq	.+2      	; 0x6a0 <main+0x8c>
 69e:	40 c0       	rjmp	.+128    	; 0x720 <main+0x10c>
					{
						SysStatus=READY;
 6a0:	82 e0       	ldi	r24, 0x02	; 2
 6a2:	80 93 be 00 	sts	0x00BE, r24
						USART_WRITE_STRING("ready");
 6a6:	86 e9       	ldi	r24, 0x96	; 150
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	0e 94 56 00 	call	0xac	; 0xac <USART_WRITE_STRING>
 6ae:	38 c0       	rjmp	.+112    	; 0x720 <main+0x10c>
					}
				} 
				else if (SysStatus==READY)
 6b0:	82 30       	cpi	r24, 0x02	; 2
 6b2:	81 f5       	brne	.+96     	; 0x714 <main+0x100>
				{
					GetPassword(&IrAddress,&IrCmd,&ReceivedPasswordFlag,ReceivedPassword);
 6b4:	ce 01       	movw	r24, r28
 6b6:	06 96       	adiw	r24, 0x06	; 6
 6b8:	be 01       	movw	r22, r28
 6ba:	6b 5f       	subi	r22, 0xFB	; 251
 6bc:	7f 4f       	sbci	r23, 0xFF	; 255
 6be:	ae 01       	movw	r20, r28
 6c0:	4e 5e       	subi	r20, 0xEE	; 238
 6c2:	5f 4f       	sbci	r21, 0xFF	; 255
 6c4:	9e 01       	movw	r18, r28
 6c6:	28 5f       	subi	r18, 0xF8	; 248
 6c8:	3f 4f       	sbci	r19, 0xFF	; 255
 6ca:	0e 94 18 02 	call	0x430	; 0x430 <GetPassword>
					if (ReceivedPasswordFlag==NEWPASSWORD)
 6ce:	8a 89       	ldd	r24, Y+18	; 0x12
 6d0:	86 30       	cpi	r24, 0x06	; 6
 6d2:	31 f5       	brne	.+76     	; 0x720 <main+0x10c>
					{
						CheckPassword(&ReceivedPassword,&ReceivedPasswordFlag);
 6d4:	ce 01       	movw	r24, r28
 6d6:	08 96       	adiw	r24, 0x08	; 8
 6d8:	be 01       	movw	r22, r28
 6da:	6e 5e       	subi	r22, 0xEE	; 238
 6dc:	7f 4f       	sbci	r23, 0xFF	; 255
 6de:	0e 94 d7 02 	call	0x5ae	; 0x5ae <CheckPassword>
						if (ReceivedPasswordFlag==CORRECT) 
 6e2:	8a 89       	ldd	r24, Y+18	; 0x12
 6e4:	83 30       	cpi	r24, 0x03	; 3
 6e6:	41 f4       	brne	.+16     	; 0x6f8 <main+0xe4>
						{
							SysStatus=UNLOCKED;
 6e8:	b1 e0       	ldi	r27, 0x01	; 1
 6ea:	b0 93 be 00 	sts	0x00BE, r27
							USART_WRITE_STRING("correct");
 6ee:	8c e9       	ldi	r24, 0x9C	; 156
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	0e 94 56 00 	call	0xac	; 0xac <USART_WRITE_STRING>
 6f6:	14 c0       	rjmp	.+40     	; 0x720 <main+0x10c>
						}
						else if (ReceivedPasswordFlag==INCORRECT)
 6f8:	84 30       	cpi	r24, 0x04	; 4
 6fa:	29 f4       	brne	.+10     	; 0x706 <main+0xf2>
						{
							USART_WRITE_STRING("incorrect");
 6fc:	84 ea       	ldi	r24, 0xA4	; 164
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	0e 94 56 00 	call	0xac	; 0xac <USART_WRITE_STRING>
 704:	0d c0       	rjmp	.+26     	; 0x720 <main+0x10c>
							// error message
						}
						else if (ReceivedPasswordFlag==EMPTYPASSWORD)
 706:	85 30       	cpi	r24, 0x05	; 5
 708:	59 f4       	brne	.+22     	; 0x720 <main+0x10c>
						{
							USART_WRITE_STRING("empty");
 70a:	8e ea       	ldi	r24, 0xAE	; 174
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	0e 94 56 00 	call	0xac	; 0xac <USART_WRITE_STRING>
 712:	06 c0       	rjmp	.+12     	; 0x720 <main+0x10c>
					}
					
				
				}
				
				else if (SysStatus==UNLOCKED)
 714:	81 30       	cpi	r24, 0x01	; 1
 716:	21 f4       	brne	.+8      	; 0x720 <main+0x10c>
				{
					USART_WRITE_STRING("Unlocked");
 718:	84 eb       	ldi	r24, 0xB4	; 180
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	0e 94 56 00 	call	0xac	; 0xac <USART_WRITE_STRING>
				}
				
				
				IrCmd=0;
 720:	1d 82       	std	Y+5, r1	; 0x05
 722:	9d cf       	rjmp	.-198    	; 0x65e <main+0x4a>

00000724 <__subsf3>:
 724:	50 58       	subi	r21, 0x80	; 128

00000726 <__addsf3>:
 726:	bb 27       	eor	r27, r27
 728:	aa 27       	eor	r26, r26
 72a:	0e d0       	rcall	.+28     	; 0x748 <__addsf3x>
 72c:	4d c1       	rjmp	.+666    	; 0x9c8 <__fp_round>
 72e:	3e d1       	rcall	.+636    	; 0x9ac <__fp_pscA>
 730:	30 f0       	brcs	.+12     	; 0x73e <__addsf3+0x18>
 732:	43 d1       	rcall	.+646    	; 0x9ba <__fp_pscB>
 734:	20 f0       	brcs	.+8      	; 0x73e <__addsf3+0x18>
 736:	31 f4       	brne	.+12     	; 0x744 <__addsf3+0x1e>
 738:	9f 3f       	cpi	r25, 0xFF	; 255
 73a:	11 f4       	brne	.+4      	; 0x740 <__addsf3+0x1a>
 73c:	1e f4       	brtc	.+6      	; 0x744 <__addsf3+0x1e>
 73e:	33 c1       	rjmp	.+614    	; 0x9a6 <__fp_nan>
 740:	0e f4       	brtc	.+2      	; 0x744 <__addsf3+0x1e>
 742:	e0 95       	com	r30
 744:	e7 fb       	bst	r30, 7
 746:	29 c1       	rjmp	.+594    	; 0x99a <__fp_inf>

00000748 <__addsf3x>:
 748:	e9 2f       	mov	r30, r25
 74a:	4f d1       	rcall	.+670    	; 0x9ea <__fp_split3>
 74c:	80 f3       	brcs	.-32     	; 0x72e <__addsf3+0x8>
 74e:	ba 17       	cp	r27, r26
 750:	62 07       	cpc	r22, r18
 752:	73 07       	cpc	r23, r19
 754:	84 07       	cpc	r24, r20
 756:	95 07       	cpc	r25, r21
 758:	18 f0       	brcs	.+6      	; 0x760 <__addsf3x+0x18>
 75a:	71 f4       	brne	.+28     	; 0x778 <__addsf3x+0x30>
 75c:	9e f5       	brtc	.+102    	; 0x7c4 <__addsf3x+0x7c>
 75e:	67 c1       	rjmp	.+718    	; 0xa2e <__fp_zero>
 760:	0e f4       	brtc	.+2      	; 0x764 <__addsf3x+0x1c>
 762:	e0 95       	com	r30
 764:	0b 2e       	mov	r0, r27
 766:	ba 2f       	mov	r27, r26
 768:	a0 2d       	mov	r26, r0
 76a:	0b 01       	movw	r0, r22
 76c:	b9 01       	movw	r22, r18
 76e:	90 01       	movw	r18, r0
 770:	0c 01       	movw	r0, r24
 772:	ca 01       	movw	r24, r20
 774:	a0 01       	movw	r20, r0
 776:	11 24       	eor	r1, r1
 778:	ff 27       	eor	r31, r31
 77a:	59 1b       	sub	r21, r25
 77c:	99 f0       	breq	.+38     	; 0x7a4 <__addsf3x+0x5c>
 77e:	59 3f       	cpi	r21, 0xF9	; 249
 780:	50 f4       	brcc	.+20     	; 0x796 <__addsf3x+0x4e>
 782:	50 3e       	cpi	r21, 0xE0	; 224
 784:	68 f1       	brcs	.+90     	; 0x7e0 <__addsf3x+0x98>
 786:	1a 16       	cp	r1, r26
 788:	f0 40       	sbci	r31, 0x00	; 0
 78a:	a2 2f       	mov	r26, r18
 78c:	23 2f       	mov	r18, r19
 78e:	34 2f       	mov	r19, r20
 790:	44 27       	eor	r20, r20
 792:	58 5f       	subi	r21, 0xF8	; 248
 794:	f3 cf       	rjmp	.-26     	; 0x77c <__addsf3x+0x34>
 796:	46 95       	lsr	r20
 798:	37 95       	ror	r19
 79a:	27 95       	ror	r18
 79c:	a7 95       	ror	r26
 79e:	f0 40       	sbci	r31, 0x00	; 0
 7a0:	53 95       	inc	r21
 7a2:	c9 f7       	brne	.-14     	; 0x796 <__addsf3x+0x4e>
 7a4:	7e f4       	brtc	.+30     	; 0x7c4 <__addsf3x+0x7c>
 7a6:	1f 16       	cp	r1, r31
 7a8:	ba 0b       	sbc	r27, r26
 7aa:	62 0b       	sbc	r22, r18
 7ac:	73 0b       	sbc	r23, r19
 7ae:	84 0b       	sbc	r24, r20
 7b0:	ba f0       	brmi	.+46     	; 0x7e0 <__addsf3x+0x98>
 7b2:	91 50       	subi	r25, 0x01	; 1
 7b4:	a1 f0       	breq	.+40     	; 0x7de <__addsf3x+0x96>
 7b6:	ff 0f       	add	r31, r31
 7b8:	bb 1f       	adc	r27, r27
 7ba:	66 1f       	adc	r22, r22
 7bc:	77 1f       	adc	r23, r23
 7be:	88 1f       	adc	r24, r24
 7c0:	c2 f7       	brpl	.-16     	; 0x7b2 <__addsf3x+0x6a>
 7c2:	0e c0       	rjmp	.+28     	; 0x7e0 <__addsf3x+0x98>
 7c4:	ba 0f       	add	r27, r26
 7c6:	62 1f       	adc	r22, r18
 7c8:	73 1f       	adc	r23, r19
 7ca:	84 1f       	adc	r24, r20
 7cc:	48 f4       	brcc	.+18     	; 0x7e0 <__addsf3x+0x98>
 7ce:	87 95       	ror	r24
 7d0:	77 95       	ror	r23
 7d2:	67 95       	ror	r22
 7d4:	b7 95       	ror	r27
 7d6:	f7 95       	ror	r31
 7d8:	9e 3f       	cpi	r25, 0xFE	; 254
 7da:	08 f0       	brcs	.+2      	; 0x7de <__addsf3x+0x96>
 7dc:	b3 cf       	rjmp	.-154    	; 0x744 <__addsf3+0x1e>
 7de:	93 95       	inc	r25
 7e0:	88 0f       	add	r24, r24
 7e2:	08 f0       	brcs	.+2      	; 0x7e6 <__addsf3x+0x9e>
 7e4:	99 27       	eor	r25, r25
 7e6:	ee 0f       	add	r30, r30
 7e8:	97 95       	ror	r25
 7ea:	87 95       	ror	r24
 7ec:	08 95       	ret

000007ee <__divsf3>:
 7ee:	0c d0       	rcall	.+24     	; 0x808 <__divsf3x>
 7f0:	eb c0       	rjmp	.+470    	; 0x9c8 <__fp_round>
 7f2:	e3 d0       	rcall	.+454    	; 0x9ba <__fp_pscB>
 7f4:	40 f0       	brcs	.+16     	; 0x806 <__divsf3+0x18>
 7f6:	da d0       	rcall	.+436    	; 0x9ac <__fp_pscA>
 7f8:	30 f0       	brcs	.+12     	; 0x806 <__divsf3+0x18>
 7fa:	21 f4       	brne	.+8      	; 0x804 <__divsf3+0x16>
 7fc:	5f 3f       	cpi	r21, 0xFF	; 255
 7fe:	19 f0       	breq	.+6      	; 0x806 <__divsf3+0x18>
 800:	cc c0       	rjmp	.+408    	; 0x99a <__fp_inf>
 802:	51 11       	cpse	r21, r1
 804:	15 c1       	rjmp	.+554    	; 0xa30 <__fp_szero>
 806:	cf c0       	rjmp	.+414    	; 0x9a6 <__fp_nan>

00000808 <__divsf3x>:
 808:	f0 d0       	rcall	.+480    	; 0x9ea <__fp_split3>
 80a:	98 f3       	brcs	.-26     	; 0x7f2 <__divsf3+0x4>

0000080c <__divsf3_pse>:
 80c:	99 23       	and	r25, r25
 80e:	c9 f3       	breq	.-14     	; 0x802 <__divsf3+0x14>
 810:	55 23       	and	r21, r21
 812:	b1 f3       	breq	.-20     	; 0x800 <__divsf3+0x12>
 814:	95 1b       	sub	r25, r21
 816:	55 0b       	sbc	r21, r21
 818:	bb 27       	eor	r27, r27
 81a:	aa 27       	eor	r26, r26
 81c:	62 17       	cp	r22, r18
 81e:	73 07       	cpc	r23, r19
 820:	84 07       	cpc	r24, r20
 822:	38 f0       	brcs	.+14     	; 0x832 <__divsf3_pse+0x26>
 824:	9f 5f       	subi	r25, 0xFF	; 255
 826:	5f 4f       	sbci	r21, 0xFF	; 255
 828:	22 0f       	add	r18, r18
 82a:	33 1f       	adc	r19, r19
 82c:	44 1f       	adc	r20, r20
 82e:	aa 1f       	adc	r26, r26
 830:	a9 f3       	breq	.-22     	; 0x81c <__divsf3_pse+0x10>
 832:	33 d0       	rcall	.+102    	; 0x89a <__stack+0x3b>
 834:	0e 2e       	mov	r0, r30
 836:	3a f0       	brmi	.+14     	; 0x846 <__divsf3_pse+0x3a>
 838:	e0 e8       	ldi	r30, 0x80	; 128
 83a:	30 d0       	rcall	.+96     	; 0x89c <__stack+0x3d>
 83c:	91 50       	subi	r25, 0x01	; 1
 83e:	50 40       	sbci	r21, 0x00	; 0
 840:	e6 95       	lsr	r30
 842:	00 1c       	adc	r0, r0
 844:	ca f7       	brpl	.-14     	; 0x838 <__divsf3_pse+0x2c>
 846:	29 d0       	rcall	.+82     	; 0x89a <__stack+0x3b>
 848:	fe 2f       	mov	r31, r30
 84a:	27 d0       	rcall	.+78     	; 0x89a <__stack+0x3b>
 84c:	66 0f       	add	r22, r22
 84e:	77 1f       	adc	r23, r23
 850:	88 1f       	adc	r24, r24
 852:	bb 1f       	adc	r27, r27
 854:	26 17       	cp	r18, r22
 856:	37 07       	cpc	r19, r23
 858:	48 07       	cpc	r20, r24
 85a:	ab 07       	cpc	r26, r27
 85c:	b0 e8       	ldi	r27, 0x80	; 128
 85e:	09 f0       	breq	.+2      	; 0x862 <__stack+0x3>
 860:	bb 0b       	sbc	r27, r27
 862:	80 2d       	mov	r24, r0
 864:	bf 01       	movw	r22, r30
 866:	ff 27       	eor	r31, r31
 868:	93 58       	subi	r25, 0x83	; 131
 86a:	5f 4f       	sbci	r21, 0xFF	; 255
 86c:	2a f0       	brmi	.+10     	; 0x878 <__stack+0x19>
 86e:	9e 3f       	cpi	r25, 0xFE	; 254
 870:	51 05       	cpc	r21, r1
 872:	68 f0       	brcs	.+26     	; 0x88e <__stack+0x2f>
 874:	92 c0       	rjmp	.+292    	; 0x99a <__fp_inf>
 876:	dc c0       	rjmp	.+440    	; 0xa30 <__fp_szero>
 878:	5f 3f       	cpi	r21, 0xFF	; 255
 87a:	ec f3       	brlt	.-6      	; 0x876 <__stack+0x17>
 87c:	98 3e       	cpi	r25, 0xE8	; 232
 87e:	dc f3       	brlt	.-10     	; 0x876 <__stack+0x17>
 880:	86 95       	lsr	r24
 882:	77 95       	ror	r23
 884:	67 95       	ror	r22
 886:	b7 95       	ror	r27
 888:	f7 95       	ror	r31
 88a:	9f 5f       	subi	r25, 0xFF	; 255
 88c:	c9 f7       	brne	.-14     	; 0x880 <__stack+0x21>
 88e:	88 0f       	add	r24, r24
 890:	91 1d       	adc	r25, r1
 892:	96 95       	lsr	r25
 894:	87 95       	ror	r24
 896:	97 f9       	bld	r25, 7
 898:	08 95       	ret
 89a:	e1 e0       	ldi	r30, 0x01	; 1
 89c:	66 0f       	add	r22, r22
 89e:	77 1f       	adc	r23, r23
 8a0:	88 1f       	adc	r24, r24
 8a2:	bb 1f       	adc	r27, r27
 8a4:	62 17       	cp	r22, r18
 8a6:	73 07       	cpc	r23, r19
 8a8:	84 07       	cpc	r24, r20
 8aa:	ba 07       	cpc	r27, r26
 8ac:	20 f0       	brcs	.+8      	; 0x8b6 <__stack+0x57>
 8ae:	62 1b       	sub	r22, r18
 8b0:	73 0b       	sbc	r23, r19
 8b2:	84 0b       	sbc	r24, r20
 8b4:	ba 0b       	sbc	r27, r26
 8b6:	ee 1f       	adc	r30, r30
 8b8:	88 f7       	brcc	.-30     	; 0x89c <__stack+0x3d>
 8ba:	e0 95       	com	r30
 8bc:	08 95       	ret

000008be <__fixsfsi>:
 8be:	04 d0       	rcall	.+8      	; 0x8c8 <__fixunssfsi>
 8c0:	68 94       	set
 8c2:	b1 11       	cpse	r27, r1
 8c4:	b5 c0       	rjmp	.+362    	; 0xa30 <__fp_szero>
 8c6:	08 95       	ret

000008c8 <__fixunssfsi>:
 8c8:	98 d0       	rcall	.+304    	; 0x9fa <__fp_splitA>
 8ca:	88 f0       	brcs	.+34     	; 0x8ee <__fixunssfsi+0x26>
 8cc:	9f 57       	subi	r25, 0x7F	; 127
 8ce:	90 f0       	brcs	.+36     	; 0x8f4 <__fixunssfsi+0x2c>
 8d0:	b9 2f       	mov	r27, r25
 8d2:	99 27       	eor	r25, r25
 8d4:	b7 51       	subi	r27, 0x17	; 23
 8d6:	a0 f0       	brcs	.+40     	; 0x900 <__fixunssfsi+0x38>
 8d8:	d1 f0       	breq	.+52     	; 0x90e <__fixunssfsi+0x46>
 8da:	66 0f       	add	r22, r22
 8dc:	77 1f       	adc	r23, r23
 8de:	88 1f       	adc	r24, r24
 8e0:	99 1f       	adc	r25, r25
 8e2:	1a f0       	brmi	.+6      	; 0x8ea <__fixunssfsi+0x22>
 8e4:	ba 95       	dec	r27
 8e6:	c9 f7       	brne	.-14     	; 0x8da <__fixunssfsi+0x12>
 8e8:	12 c0       	rjmp	.+36     	; 0x90e <__fixunssfsi+0x46>
 8ea:	b1 30       	cpi	r27, 0x01	; 1
 8ec:	81 f0       	breq	.+32     	; 0x90e <__fixunssfsi+0x46>
 8ee:	9f d0       	rcall	.+318    	; 0xa2e <__fp_zero>
 8f0:	b1 e0       	ldi	r27, 0x01	; 1
 8f2:	08 95       	ret
 8f4:	9c c0       	rjmp	.+312    	; 0xa2e <__fp_zero>
 8f6:	67 2f       	mov	r22, r23
 8f8:	78 2f       	mov	r23, r24
 8fa:	88 27       	eor	r24, r24
 8fc:	b8 5f       	subi	r27, 0xF8	; 248
 8fe:	39 f0       	breq	.+14     	; 0x90e <__fixunssfsi+0x46>
 900:	b9 3f       	cpi	r27, 0xF9	; 249
 902:	cc f3       	brlt	.-14     	; 0x8f6 <__fixunssfsi+0x2e>
 904:	86 95       	lsr	r24
 906:	77 95       	ror	r23
 908:	67 95       	ror	r22
 90a:	b3 95       	inc	r27
 90c:	d9 f7       	brne	.-10     	; 0x904 <__fixunssfsi+0x3c>
 90e:	3e f4       	brtc	.+14     	; 0x91e <__fixunssfsi+0x56>
 910:	90 95       	com	r25
 912:	80 95       	com	r24
 914:	70 95       	com	r23
 916:	61 95       	neg	r22
 918:	7f 4f       	sbci	r23, 0xFF	; 255
 91a:	8f 4f       	sbci	r24, 0xFF	; 255
 91c:	9f 4f       	sbci	r25, 0xFF	; 255
 91e:	08 95       	ret

00000920 <__floatunsisf>:
 920:	e8 94       	clt
 922:	09 c0       	rjmp	.+18     	; 0x936 <__floatsisf+0x12>

00000924 <__floatsisf>:
 924:	97 fb       	bst	r25, 7
 926:	3e f4       	brtc	.+14     	; 0x936 <__floatsisf+0x12>
 928:	90 95       	com	r25
 92a:	80 95       	com	r24
 92c:	70 95       	com	r23
 92e:	61 95       	neg	r22
 930:	7f 4f       	sbci	r23, 0xFF	; 255
 932:	8f 4f       	sbci	r24, 0xFF	; 255
 934:	9f 4f       	sbci	r25, 0xFF	; 255
 936:	99 23       	and	r25, r25
 938:	a9 f0       	breq	.+42     	; 0x964 <__floatsisf+0x40>
 93a:	f9 2f       	mov	r31, r25
 93c:	96 e9       	ldi	r25, 0x96	; 150
 93e:	bb 27       	eor	r27, r27
 940:	93 95       	inc	r25
 942:	f6 95       	lsr	r31
 944:	87 95       	ror	r24
 946:	77 95       	ror	r23
 948:	67 95       	ror	r22
 94a:	b7 95       	ror	r27
 94c:	f1 11       	cpse	r31, r1
 94e:	f8 cf       	rjmp	.-16     	; 0x940 <__floatsisf+0x1c>
 950:	fa f4       	brpl	.+62     	; 0x990 <__floatsisf+0x6c>
 952:	bb 0f       	add	r27, r27
 954:	11 f4       	brne	.+4      	; 0x95a <__floatsisf+0x36>
 956:	60 ff       	sbrs	r22, 0
 958:	1b c0       	rjmp	.+54     	; 0x990 <__floatsisf+0x6c>
 95a:	6f 5f       	subi	r22, 0xFF	; 255
 95c:	7f 4f       	sbci	r23, 0xFF	; 255
 95e:	8f 4f       	sbci	r24, 0xFF	; 255
 960:	9f 4f       	sbci	r25, 0xFF	; 255
 962:	16 c0       	rjmp	.+44     	; 0x990 <__floatsisf+0x6c>
 964:	88 23       	and	r24, r24
 966:	11 f0       	breq	.+4      	; 0x96c <__floatsisf+0x48>
 968:	96 e9       	ldi	r25, 0x96	; 150
 96a:	11 c0       	rjmp	.+34     	; 0x98e <__floatsisf+0x6a>
 96c:	77 23       	and	r23, r23
 96e:	21 f0       	breq	.+8      	; 0x978 <__floatsisf+0x54>
 970:	9e e8       	ldi	r25, 0x8E	; 142
 972:	87 2f       	mov	r24, r23
 974:	76 2f       	mov	r23, r22
 976:	05 c0       	rjmp	.+10     	; 0x982 <__floatsisf+0x5e>
 978:	66 23       	and	r22, r22
 97a:	71 f0       	breq	.+28     	; 0x998 <__floatsisf+0x74>
 97c:	96 e8       	ldi	r25, 0x86	; 134
 97e:	86 2f       	mov	r24, r22
 980:	70 e0       	ldi	r23, 0x00	; 0
 982:	60 e0       	ldi	r22, 0x00	; 0
 984:	2a f0       	brmi	.+10     	; 0x990 <__floatsisf+0x6c>
 986:	9a 95       	dec	r25
 988:	66 0f       	add	r22, r22
 98a:	77 1f       	adc	r23, r23
 98c:	88 1f       	adc	r24, r24
 98e:	da f7       	brpl	.-10     	; 0x986 <__floatsisf+0x62>
 990:	88 0f       	add	r24, r24
 992:	96 95       	lsr	r25
 994:	87 95       	ror	r24
 996:	97 f9       	bld	r25, 7
 998:	08 95       	ret

0000099a <__fp_inf>:
 99a:	97 f9       	bld	r25, 7
 99c:	9f 67       	ori	r25, 0x7F	; 127
 99e:	80 e8       	ldi	r24, 0x80	; 128
 9a0:	70 e0       	ldi	r23, 0x00	; 0
 9a2:	60 e0       	ldi	r22, 0x00	; 0
 9a4:	08 95       	ret

000009a6 <__fp_nan>:
 9a6:	9f ef       	ldi	r25, 0xFF	; 255
 9a8:	80 ec       	ldi	r24, 0xC0	; 192
 9aa:	08 95       	ret

000009ac <__fp_pscA>:
 9ac:	00 24       	eor	r0, r0
 9ae:	0a 94       	dec	r0
 9b0:	16 16       	cp	r1, r22
 9b2:	17 06       	cpc	r1, r23
 9b4:	18 06       	cpc	r1, r24
 9b6:	09 06       	cpc	r0, r25
 9b8:	08 95       	ret

000009ba <__fp_pscB>:
 9ba:	00 24       	eor	r0, r0
 9bc:	0a 94       	dec	r0
 9be:	12 16       	cp	r1, r18
 9c0:	13 06       	cpc	r1, r19
 9c2:	14 06       	cpc	r1, r20
 9c4:	05 06       	cpc	r0, r21
 9c6:	08 95       	ret

000009c8 <__fp_round>:
 9c8:	09 2e       	mov	r0, r25
 9ca:	03 94       	inc	r0
 9cc:	00 0c       	add	r0, r0
 9ce:	11 f4       	brne	.+4      	; 0x9d4 <__fp_round+0xc>
 9d0:	88 23       	and	r24, r24
 9d2:	52 f0       	brmi	.+20     	; 0x9e8 <__fp_round+0x20>
 9d4:	bb 0f       	add	r27, r27
 9d6:	40 f4       	brcc	.+16     	; 0x9e8 <__fp_round+0x20>
 9d8:	bf 2b       	or	r27, r31
 9da:	11 f4       	brne	.+4      	; 0x9e0 <__fp_round+0x18>
 9dc:	60 ff       	sbrs	r22, 0
 9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__fp_round+0x20>
 9e0:	6f 5f       	subi	r22, 0xFF	; 255
 9e2:	7f 4f       	sbci	r23, 0xFF	; 255
 9e4:	8f 4f       	sbci	r24, 0xFF	; 255
 9e6:	9f 4f       	sbci	r25, 0xFF	; 255
 9e8:	08 95       	ret

000009ea <__fp_split3>:
 9ea:	57 fd       	sbrc	r21, 7
 9ec:	90 58       	subi	r25, 0x80	; 128
 9ee:	44 0f       	add	r20, r20
 9f0:	55 1f       	adc	r21, r21
 9f2:	59 f0       	breq	.+22     	; 0xa0a <__fp_splitA+0x10>
 9f4:	5f 3f       	cpi	r21, 0xFF	; 255
 9f6:	71 f0       	breq	.+28     	; 0xa14 <__fp_splitA+0x1a>
 9f8:	47 95       	ror	r20

000009fa <__fp_splitA>:
 9fa:	88 0f       	add	r24, r24
 9fc:	97 fb       	bst	r25, 7
 9fe:	99 1f       	adc	r25, r25
 a00:	61 f0       	breq	.+24     	; 0xa1a <__fp_splitA+0x20>
 a02:	9f 3f       	cpi	r25, 0xFF	; 255
 a04:	79 f0       	breq	.+30     	; 0xa24 <__fp_splitA+0x2a>
 a06:	87 95       	ror	r24
 a08:	08 95       	ret
 a0a:	12 16       	cp	r1, r18
 a0c:	13 06       	cpc	r1, r19
 a0e:	14 06       	cpc	r1, r20
 a10:	55 1f       	adc	r21, r21
 a12:	f2 cf       	rjmp	.-28     	; 0x9f8 <__fp_split3+0xe>
 a14:	46 95       	lsr	r20
 a16:	f1 df       	rcall	.-30     	; 0x9fa <__fp_splitA>
 a18:	08 c0       	rjmp	.+16     	; 0xa2a <__fp_splitA+0x30>
 a1a:	16 16       	cp	r1, r22
 a1c:	17 06       	cpc	r1, r23
 a1e:	18 06       	cpc	r1, r24
 a20:	99 1f       	adc	r25, r25
 a22:	f1 cf       	rjmp	.-30     	; 0xa06 <__fp_splitA+0xc>
 a24:	86 95       	lsr	r24
 a26:	71 05       	cpc	r23, r1
 a28:	61 05       	cpc	r22, r1
 a2a:	08 94       	sec
 a2c:	08 95       	ret

00000a2e <__fp_zero>:
 a2e:	e8 94       	clt

00000a30 <__fp_szero>:
 a30:	bb 27       	eor	r27, r27
 a32:	66 27       	eor	r22, r22
 a34:	77 27       	eor	r23, r23
 a36:	cb 01       	movw	r24, r22
 a38:	97 f9       	bld	r25, 7
 a3a:	08 95       	ret

00000a3c <__mulsf3>:
 a3c:	0b d0       	rcall	.+22     	; 0xa54 <__mulsf3x>
 a3e:	c4 cf       	rjmp	.-120    	; 0x9c8 <__fp_round>
 a40:	b5 df       	rcall	.-150    	; 0x9ac <__fp_pscA>
 a42:	28 f0       	brcs	.+10     	; 0xa4e <__mulsf3+0x12>
 a44:	ba df       	rcall	.-140    	; 0x9ba <__fp_pscB>
 a46:	18 f0       	brcs	.+6      	; 0xa4e <__mulsf3+0x12>
 a48:	95 23       	and	r25, r21
 a4a:	09 f0       	breq	.+2      	; 0xa4e <__mulsf3+0x12>
 a4c:	a6 cf       	rjmp	.-180    	; 0x99a <__fp_inf>
 a4e:	ab cf       	rjmp	.-170    	; 0x9a6 <__fp_nan>
 a50:	11 24       	eor	r1, r1
 a52:	ee cf       	rjmp	.-36     	; 0xa30 <__fp_szero>

00000a54 <__mulsf3x>:
 a54:	ca df       	rcall	.-108    	; 0x9ea <__fp_split3>
 a56:	a0 f3       	brcs	.-24     	; 0xa40 <__mulsf3+0x4>

00000a58 <__mulsf3_pse>:
 a58:	95 9f       	mul	r25, r21
 a5a:	d1 f3       	breq	.-12     	; 0xa50 <__mulsf3+0x14>
 a5c:	95 0f       	add	r25, r21
 a5e:	50 e0       	ldi	r21, 0x00	; 0
 a60:	55 1f       	adc	r21, r21
 a62:	62 9f       	mul	r22, r18
 a64:	f0 01       	movw	r30, r0
 a66:	72 9f       	mul	r23, r18
 a68:	bb 27       	eor	r27, r27
 a6a:	f0 0d       	add	r31, r0
 a6c:	b1 1d       	adc	r27, r1
 a6e:	63 9f       	mul	r22, r19
 a70:	aa 27       	eor	r26, r26
 a72:	f0 0d       	add	r31, r0
 a74:	b1 1d       	adc	r27, r1
 a76:	aa 1f       	adc	r26, r26
 a78:	64 9f       	mul	r22, r20
 a7a:	66 27       	eor	r22, r22
 a7c:	b0 0d       	add	r27, r0
 a7e:	a1 1d       	adc	r26, r1
 a80:	66 1f       	adc	r22, r22
 a82:	82 9f       	mul	r24, r18
 a84:	22 27       	eor	r18, r18
 a86:	b0 0d       	add	r27, r0
 a88:	a1 1d       	adc	r26, r1
 a8a:	62 1f       	adc	r22, r18
 a8c:	73 9f       	mul	r23, r19
 a8e:	b0 0d       	add	r27, r0
 a90:	a1 1d       	adc	r26, r1
 a92:	62 1f       	adc	r22, r18
 a94:	83 9f       	mul	r24, r19
 a96:	a0 0d       	add	r26, r0
 a98:	61 1d       	adc	r22, r1
 a9a:	22 1f       	adc	r18, r18
 a9c:	74 9f       	mul	r23, r20
 a9e:	33 27       	eor	r19, r19
 aa0:	a0 0d       	add	r26, r0
 aa2:	61 1d       	adc	r22, r1
 aa4:	23 1f       	adc	r18, r19
 aa6:	84 9f       	mul	r24, r20
 aa8:	60 0d       	add	r22, r0
 aaa:	21 1d       	adc	r18, r1
 aac:	82 2f       	mov	r24, r18
 aae:	76 2f       	mov	r23, r22
 ab0:	6a 2f       	mov	r22, r26
 ab2:	11 24       	eor	r1, r1
 ab4:	9f 57       	subi	r25, 0x7F	; 127
 ab6:	50 40       	sbci	r21, 0x00	; 0
 ab8:	8a f0       	brmi	.+34     	; 0xadc <__mulsf3_pse+0x84>
 aba:	e1 f0       	breq	.+56     	; 0xaf4 <__mulsf3_pse+0x9c>
 abc:	88 23       	and	r24, r24
 abe:	4a f0       	brmi	.+18     	; 0xad2 <__mulsf3_pse+0x7a>
 ac0:	ee 0f       	add	r30, r30
 ac2:	ff 1f       	adc	r31, r31
 ac4:	bb 1f       	adc	r27, r27
 ac6:	66 1f       	adc	r22, r22
 ac8:	77 1f       	adc	r23, r23
 aca:	88 1f       	adc	r24, r24
 acc:	91 50       	subi	r25, 0x01	; 1
 ace:	50 40       	sbci	r21, 0x00	; 0
 ad0:	a9 f7       	brne	.-22     	; 0xabc <__mulsf3_pse+0x64>
 ad2:	9e 3f       	cpi	r25, 0xFE	; 254
 ad4:	51 05       	cpc	r21, r1
 ad6:	70 f0       	brcs	.+28     	; 0xaf4 <__mulsf3_pse+0x9c>
 ad8:	60 cf       	rjmp	.-320    	; 0x99a <__fp_inf>
 ada:	aa cf       	rjmp	.-172    	; 0xa30 <__fp_szero>
 adc:	5f 3f       	cpi	r21, 0xFF	; 255
 ade:	ec f3       	brlt	.-6      	; 0xada <__mulsf3_pse+0x82>
 ae0:	98 3e       	cpi	r25, 0xE8	; 232
 ae2:	dc f3       	brlt	.-10     	; 0xada <__mulsf3_pse+0x82>
 ae4:	86 95       	lsr	r24
 ae6:	77 95       	ror	r23
 ae8:	67 95       	ror	r22
 aea:	b7 95       	ror	r27
 aec:	f7 95       	ror	r31
 aee:	e7 95       	ror	r30
 af0:	9f 5f       	subi	r25, 0xFF	; 255
 af2:	c1 f7       	brne	.-16     	; 0xae4 <__mulsf3_pse+0x8c>
 af4:	fe 2b       	or	r31, r30
 af6:	88 0f       	add	r24, r24
 af8:	91 1d       	adc	r25, r1
 afa:	96 95       	lsr	r25
 afc:	87 95       	ror	r24
 afe:	97 f9       	bld	r25, 7
 b00:	08 95       	ret

00000b02 <__divmodsi4>:
 b02:	97 fb       	bst	r25, 7
 b04:	09 2e       	mov	r0, r25
 b06:	05 26       	eor	r0, r21
 b08:	0e d0       	rcall	.+28     	; 0xb26 <__divmodsi4_neg1>
 b0a:	57 fd       	sbrc	r21, 7
 b0c:	04 d0       	rcall	.+8      	; 0xb16 <__divmodsi4_neg2>
 b0e:	14 d0       	rcall	.+40     	; 0xb38 <__udivmodsi4>
 b10:	0a d0       	rcall	.+20     	; 0xb26 <__divmodsi4_neg1>
 b12:	00 1c       	adc	r0, r0
 b14:	38 f4       	brcc	.+14     	; 0xb24 <__divmodsi4_exit>

00000b16 <__divmodsi4_neg2>:
 b16:	50 95       	com	r21
 b18:	40 95       	com	r20
 b1a:	30 95       	com	r19
 b1c:	21 95       	neg	r18
 b1e:	3f 4f       	sbci	r19, 0xFF	; 255
 b20:	4f 4f       	sbci	r20, 0xFF	; 255
 b22:	5f 4f       	sbci	r21, 0xFF	; 255

00000b24 <__divmodsi4_exit>:
 b24:	08 95       	ret

00000b26 <__divmodsi4_neg1>:
 b26:	f6 f7       	brtc	.-4      	; 0xb24 <__divmodsi4_exit>
 b28:	90 95       	com	r25
 b2a:	80 95       	com	r24
 b2c:	70 95       	com	r23
 b2e:	61 95       	neg	r22
 b30:	7f 4f       	sbci	r23, 0xFF	; 255
 b32:	8f 4f       	sbci	r24, 0xFF	; 255
 b34:	9f 4f       	sbci	r25, 0xFF	; 255
 b36:	08 95       	ret

00000b38 <__udivmodsi4>:
 b38:	a1 e2       	ldi	r26, 0x21	; 33
 b3a:	1a 2e       	mov	r1, r26
 b3c:	aa 1b       	sub	r26, r26
 b3e:	bb 1b       	sub	r27, r27
 b40:	fd 01       	movw	r30, r26
 b42:	0d c0       	rjmp	.+26     	; 0xb5e <__udivmodsi4_ep>

00000b44 <__udivmodsi4_loop>:
 b44:	aa 1f       	adc	r26, r26
 b46:	bb 1f       	adc	r27, r27
 b48:	ee 1f       	adc	r30, r30
 b4a:	ff 1f       	adc	r31, r31
 b4c:	a2 17       	cp	r26, r18
 b4e:	b3 07       	cpc	r27, r19
 b50:	e4 07       	cpc	r30, r20
 b52:	f5 07       	cpc	r31, r21
 b54:	20 f0       	brcs	.+8      	; 0xb5e <__udivmodsi4_ep>
 b56:	a2 1b       	sub	r26, r18
 b58:	b3 0b       	sbc	r27, r19
 b5a:	e4 0b       	sbc	r30, r20
 b5c:	f5 0b       	sbc	r31, r21

00000b5e <__udivmodsi4_ep>:
 b5e:	66 1f       	adc	r22, r22
 b60:	77 1f       	adc	r23, r23
 b62:	88 1f       	adc	r24, r24
 b64:	99 1f       	adc	r25, r25
 b66:	1a 94       	dec	r1
 b68:	69 f7       	brne	.-38     	; 0xb44 <__udivmodsi4_loop>
 b6a:	60 95       	com	r22
 b6c:	70 95       	com	r23
 b6e:	80 95       	com	r24
 b70:	90 95       	com	r25
 b72:	9b 01       	movw	r18, r22
 b74:	ac 01       	movw	r20, r24
 b76:	bd 01       	movw	r22, r26
 b78:	cf 01       	movw	r24, r30
 b7a:	08 95       	ret

00000b7c <strcmp>:
 b7c:	fb 01       	movw	r30, r22
 b7e:	dc 01       	movw	r26, r24
 b80:	8d 91       	ld	r24, X+
 b82:	01 90       	ld	r0, Z+
 b84:	80 19       	sub	r24, r0
 b86:	01 10       	cpse	r0, r1
 b88:	d9 f3       	breq	.-10     	; 0xb80 <strcmp+0x4>
 b8a:	99 0b       	sbc	r25, r25
 b8c:	08 95       	ret

00000b8e <_exit>:
 b8e:	f8 94       	cli

00000b90 <__stop_program>:
 b90:	ff cf       	rjmp	.-2      	; 0xb90 <__stop_program>
